precompile(Tuple{typeof(Base.getproperty), Base.GenericCondition{Base.ReentrantLock}, Symbol})
precompile(Tuple{Distributed.var"#137#139"})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(LibSSH2_jll.__init__)})
precompile(Tuple{typeof(LibGit2_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(nghttp2_jll.__init__)})
precompile(Tuple{typeof(LibCURL_jll.__init__)})
precompile(Tuple{typeof(MozillaCACerts_jll.__init__)})
precompile(Tuple{typeof(p7zip_jll.__init__)})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base._include), Function, Module, String})
precompile(Tuple{typeof(Revise.iswritable), String})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{Base.Precompilation.var"##precompilepkgs#8", Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.TTY, Bool, Bool, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Base.Set{Base.PkgId}, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#collect_all_deps#49", Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.iszero), Float64})
precompile(Tuple{Revise.var"#105#106"})
precompile(Tuple{typeof(Revise.active_repl_backend_available)})
precompile(Tuple{typeof(Base.Precompilation.precompile_pkgs_maybe_cachefile_lock), Base.Precompilation.var"#30#68"{Base.Pipe, String, Base.PkgId, Base.CacheFlags, Base.Cmd}, Base.TTY, Base.ReentrantLock, Bool, Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, String}, Bool})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{Base.var"#783#784"{Task}})
precompile(Tuple{Base.Precompilation.var"#26#64"{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(SuiteSparse_jll.__init__)})
precompile(Tuple{typeof(Base.issupbuild), Base.VersionNumber})
precompile(Tuple{typeof(SparseArrays.CHOLMOD.__init__)})
precompile(Tuple{typeof(SparseArrays.LibSuiteSparse.cholmod_version), Array{Int32, 1}})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(SPIRV_Tools_jll.__init__)})
precompile(Tuple{typeof(SPIRV_Tools_jll.find_artifact_dir)})
precompile(Tuple{typeof(Core.memoryref), Memory{Tuple{Any, Pair{Symbol, Any}}}})
precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.Filesystem.dirname), String})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(OpenLibm_jll.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(glslang_jll.__init__)})
precompile(Tuple{typeof(glslang_jll.find_artifact_dir)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.Filesystem.dirname), String})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.getproperty), Base.Set{String}, Symbol})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Core.memoryref), Memory{Revise.FileInfo}})
precompile(Tuple{typeof(Core.memoryref), Memory{Tuple{Module, Expr}}})
precompile(Tuple{typeof(Base.something), Nothing, String, Vararg{String}})
precompile(Tuple{typeof(Base.something), String})
precompile(Tuple{FileWatching.Pidfile.var"##mkpidlock#7", Base.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:stale_age, :wait), Tuple{Int64, Bool}}}, typeof(FileWatching.Pidfile.mkpidlock), Base.var"#1107#1108"{Base.PkgId}, String, Int32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:reasons,), Tuple{Base.Dict{String, Int64}}}, typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), Base.PkgId, String, String, String, Array{Pair{Base.PkgId, UInt128}, 1}, Base.Cmd, IO, IO})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Type})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}})
precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Memory{UInt8}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(Base.close), Base.PipeEndpoint})
precompile(Tuple{Base.var"#840#841"{FileWatching.Pidfile.var"#2#4"{Base.Filesystem.File}, Base.Timer}})
precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.PkgId, Module}, Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Main.include), String})
precompile(Tuple{typeof(Base._include), Function, Module, String})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{DocStringExtensions.var"#35#36"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Vararg{Any, 5}})
precompile(Tuple{typeof(Base.Filesystem.basename), String})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.destructure_callex), Module, Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, String}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.get!), Base.IdDict{Any, Any}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:with_validation,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Vulkan.QueueFlag, Int64})
precompile(Tuple{Type{NamedTuple{(:layer_name,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{Type{NamedTuple{(:next,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{Type{NamedTuple{(:allocator,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkAllocationCallbacks}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkAllocationCallbacks}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(!=)), Symbol})
precompile(Tuple{typeof(Base.filter), Function, NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{12, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{11, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{8, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Symbol, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{13, Symbol}})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.DeviceQueueCreateFlag}})
precompile(Tuple{typeof(Base._tablesz), Int64})
precompile(Tuple{Core.Compiler.var"#468#469"{Core.Compiler.NativeInterpreter, Nothing, Core.Compiler.IRInterpretationState}, Any})
precompile(Tuple{Type{NamedTuple{(:allocator, :next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Int64}})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{Type{NamedTuple{(:inner, :outer), T} where T<:Tuple}, Tuple{Nothing, Tuple{Int64}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:with_validation,), Tuple{Bool}}, typeof(Lava.init)})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan._LayerProperties, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan._ExtensionProperties, 1}, Vulkan.VulkanError}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :flags, :message_severity, :message_type, :pfn_user_callback, :user_data), Tuple{Ptr{Nothing}, UInt32, Vulkan.DebugUtilsMessageSeverityFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT, Ptr{Nothing}, Ptr{Nothing}}}})
precompile(Tuple{Type{Vulkan.DebugUtilsMessengerCreateInfoEXT}, Ptr{Nothing}, UInt32, Vulkan.DebugUtilsMessageSeverityFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :application_info), Tuple{Vulkan.DebugUtilsMessengerCreateInfoEXT, Vulkan.InstanceCreateFlag, Vulkan._ApplicationInfo}}, Type{Vulkan._InstanceCreateInfo}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Lava.debug_callback), Vulkan.DebugUtilsMessageSeverityFlagEXT, Vulkan.DebugUtilsMessageTypeFlagEXT, Ptr{VulkanCore.LibVulkan.VkDebugUtilsMessengerCallbackDataEXT}, Ptr{Nothing}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Instance, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DebugUtilsMessengerEXT, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.intersect), NTuple{13, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), Base.Fix{2, typeof(Base.in), Array{Symbol, 1}}, NTuple{12, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Features}, Vararg{Bool, 12}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan11Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :storage_buffer_16_bit_access, :uniform_and_storage_buffer_16_bit_access, :storage_push_constant_16, :storage_input_output_16, :multiview, :multiview_geometry_shader, :multiview_tessellation_shader, :variable_pointers_storage_buffer, :variable_pointers, :protected_memory, :sampler_ycbcr_conversion, :shader_draw_parameters), Tuple{Ptr{Nothing}, Vararg{Bool, 12}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Features}, Ptr{Nothing}, Vararg{Bool, 12}})
precompile(Tuple{typeof(Base.intersect), NTuple{48, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.in), NTuple{48, Symbol}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix{2, typeof(Base.in), NTuple{48, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{48, Symbol}})
precompile(Tuple{typeof(Base.map), Base.Fix{2, typeof(Base.in), Array{Symbol, 1}}, NTuple{47, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, Vararg{Bool, 47}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :sampler_mirror_clamp_to_edge, :draw_indirect_count, :storage_buffer_8_bit_access, :uniform_and_storage_buffer_8_bit_access, :storage_push_constant_8, :shader_buffer_int_64_atomics, :shader_shared_int_64_atomics, :shader_float_16, :shader_int_8, :descriptor_indexing, :shader_input_attachment_array_dynamic_indexing, :shader_uniform_texel_buffer_array_dynamic_indexing, :shader_storage_texel_buffer_array_dynamic_indexing, :shader_uniform_buffer_array_non_uniform_indexing, :shader_sampled_image_array_non_uniform_indexing, :shader_storage_buffer_array_non_uniform_indexing, :shader_storage_image_array_non_uniform_indexing, :shader_input_attachment_array_non_uniform_indexing, :shader_uniform_texel_buffer_array_non_uniform_indexing, :shader_storage_texel_buffer_array_non_uniform_indexing, :descriptor_binding_uniform_buffer_update_after_bind, :descriptor_binding_sampled_image_update_after_bind, :descriptor_binding_storage_image_update_after_bind, :descriptor_binding_storage_buffer_update_after_bind, :descriptor_binding_uniform_texel_buffer_update_after_bind, :descriptor_binding_storage_texel_buffer_update_after_bind, :descriptor_binding_update_unused_while_pending, :descriptor_binding_partially_bound, :descriptor_binding_variable_descriptor_count, :runtime_descriptor_array, :sampler_filter_minmax, :scalar_block_layout, :imageless_framebuffer, :uniform_buffer_standard_layout, :shader_subgroup_extended_types, :separate_depth_stencil_layouts, :host_query_reset, :timeline_semaphore, :buffer_device_address, :buffer_device_address_capture_replay, :buffer_device_address_multi_device, :vulkan_memory_model, :vulkan_memory_model_device_scope, :vulkan_memory_model_availability_visibility_chains, :shader_output_viewport_index, :shader_output_layer, :subgroup_broadcast_dynamic_id), Tuple{Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Features}, Vulkan.PhysicalDeviceVulkan11Features, Vararg{Bool, 47}})
precompile(Tuple{typeof(Base.intersect), NTuple{16, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.in), NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix{2, typeof(Base.in), NTuple{16, Symbol}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.filter_rec), Base.Fix{2, typeof(Base.:(!=)), Symbol}, NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.map), Base.Fix{2, typeof(Base.in), Array{Symbol, 1}}, NTuple{15, Symbol}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Vararg{Bool, 15}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan13Features, NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan12Features}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Vulkan.PhysicalDeviceVulkan12Features, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.filter), Function, NTuple{55, Symbol}})
precompile(Tuple{typeof(Base.map), Base.Fix{2, typeof(Base.in), Array{Symbol, 1}}, NTuple{55, Symbol}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.PhysicalDevice, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.iterate), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Vulkan._PhysicalDeviceFeatures2})
precompile(Tuple{Type{Ref{T} where T}, VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2})
precompile(Tuple{typeof(VulkanCore.LibVulkan.vkGetPhysicalDeviceFeatures2), Vulkan.PhysicalDevice, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceFeatures2}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.isempty), Array{Union{}, 1}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceProperties2, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{Vulkan._PhysicalDeviceProperties2}, VulkanCore.LibVulkan.VkPhysicalDeviceProperties2, Array{Any, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Vulkan._PhysicalDeviceProperties2})
precompile(Tuple{Type{Ref{T} where T}, VulkanCore.LibVulkan.VkPhysicalDeviceProperties2})
precompile(Tuple{typeof(VulkanCore.LibVulkan.vkGetPhysicalDeviceProperties2), Vulkan.PhysicalDevice, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceProperties2}, Ptr{Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :enabled_features), Tuple{Vulkan.PhysicalDeviceFeatures2, UInt32, Ptr{Nothing}}}, Type{Vulkan._DeviceCreateInfo}, Array{Vulkan._DeviceQueueCreateInfo, 1}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan13Features}}, Type{Vulkan._PhysicalDeviceFeatures2}, Vulkan._PhysicalDeviceFeatures})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan12Features}}, Type{Vulkan._PhysicalDeviceVulkan13Features}, Vararg{Bool, 15}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Vulkan.PhysicalDeviceVulkan11Features}}, Type{Vulkan._PhysicalDeviceVulkan12Features}, Vararg{Bool, 47}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._PhysicalDeviceVulkan11Features}, Vararg{Bool, 12}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Device, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.GraphicsPipelineCreateInfo}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.ComputePipelineCreateInfo}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.PropertyCondition}})
precompile(Tuple{typeof(Base.in), Type, Array{DataType, 1}})
precompile(Tuple{typeof(Base.push!), Array{DataType, 1}, Type})
precompile(Tuple{typeof(Vulkan.get_physical_device_properties_2), Vulkan.PhysicalDevice, Type, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Vulkan.intermediate_type), Tuple{DataType, DataType}})
precompile(Tuple{Base.Broadcast.var"#17#18"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Vulkan.intermediate_type), Tuple{Tuple{DataType, DataType}}}}, Int64})
precompile(Tuple{typeof(Vulkan._get_physical_device_properties_2), Vulkan.PhysicalDevice, Type, Type})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Base.popfirst!), Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{54, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, VulkanCore.LibVulkan.VkDriverId, NTuple{256, Int8}, NTuple{256, Int8}, VulkanCore.LibVulkan.VkConformanceVersion, VulkanCore.LibVulkan.VkShaderFloatControlsIndependence, VulkanCore.LibVulkan.VkShaderFloatControlsIndependence, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt64, UInt32})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{17, Symbol}})
precompile(Tuple{typeof(ConstructionBase.setproperties), VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties, NamedTuple{(:sType, :pNext), Tuple{VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}})
precompile(Tuple{typeof(Base.isempty), Array{DataType, 1}})
precompile(Tuple{typeof(Base.:(!=)), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties}}, Ptr{Nothing}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan11Properties, Type})
precompile(Tuple{Type{Ptr{VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties}}, Ptr{Nothing}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Properties}, VulkanCore.LibVulkan.VkPhysicalDeviceVulkan12Properties})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Capability}})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan13Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :robust_image_access, :inline_uniform_block, :descriptor_binding_inline_uniform_block_update_after_bind, :pipeline_creation_cache_control, :private_data, :shader_demote_to_helper_invocation, :shader_terminate_invocation, :subgroup_size_control, :compute_full_subgroups, :synchronization2, :texture_compression_astc_hdr, :shader_zero_initialize_workgroup_memory, :dynamic_rendering, :shader_integer_dot_product, :maintenance4), Tuple{Ptr{Nothing}, Vararg{Bool, 15}}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan13Features}, Ptr{Nothing}, Vararg{Bool, 15}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan13Features, Symbol})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Features, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan11Features, Symbol})
precompile(Tuple{SPIRVVulkanExt.var"#2#8", Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.PhysicalDeviceFeatures2}})
precompile(Tuple{Type{Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Symbol, Vulkan.PhysicalDeviceFeatures2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Base.Generator{Array{Any, 1}, SPIRVVulkanExt.var"#2#8"}, Int64})
precompile(Tuple{SPIRVVulkanExt.var"#2#8", Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Base.copy), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceFeatures2}, Type{Vulkan.HighLevelStruct}})
precompile(Tuple{typeof(Dictionaries.gettoken!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Symbol})
precompile(Tuple{typeof(Dictionaries.settokenvalue!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Tuple{Int64, Int64}, Vulkan.PhysicalDeviceVulkan13Features})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Base.Generator{Array{Any, 1}, SPIRVVulkanExt.var"#2#8"}, Int64})
precompile(Tuple{SPIRVVulkanExt.var"#2#8", Vulkan.PhysicalDeviceVulkan12Features})
precompile(Tuple{SPIRVVulkanExt.var"#2#8", Vulkan.PhysicalDeviceVulkan11Features})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :properties), Tuple{Ptr{Nothing}, Vulkan.PhysicalDeviceProperties}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceProperties2}, Ptr{Nothing}, Vulkan.PhysicalDeviceProperties})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan11Properties, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :device_uuid, :driver_uuid, :device_luid, :device_node_mask, :device_luid_valid, :subgroup_size, :subgroup_supported_stages, :subgroup_supported_operations, :subgroup_quad_operations_in_all_stages, :point_clipping_behavior, :max_multiview_view_count, :max_multiview_instance_index, :protected_no_fault, :max_per_set_descriptors, :max_memory_allocation_size), Tuple{Ptr{Nothing}, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan11Properties}, Ptr{Nothing}, NTuple{16, UInt8}, NTuple{16, UInt8}, NTuple{8, UInt8}, UInt32, Bool, UInt32, Vulkan.ShaderStageFlag, Vulkan.SubgroupFeatureFlag, Bool, Vulkan.PointClippingBehavior, UInt32, UInt32, Bool, UInt32, UInt64})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan11Properties, Symbol})
precompile(Tuple{typeof(ConstructionBase.setproperties), Vulkan.PhysicalDeviceVulkan12Properties, NamedTuple{(:next,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{53, Symbol}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :driver_id, :driver_name, :driver_info, :conformance_version, :denorm_behavior_independence, :rounding_mode_independence, :shader_signed_zero_inf_nan_preserve_float_16, :shader_signed_zero_inf_nan_preserve_float_32, :shader_signed_zero_inf_nan_preserve_float_64, :shader_denorm_preserve_float_16, :shader_denorm_preserve_float_32, :shader_denorm_preserve_float_64, :shader_denorm_flush_to_zero_float_16, :shader_denorm_flush_to_zero_float_32, :shader_denorm_flush_to_zero_float_64, :shader_rounding_mode_rte_float_16, :shader_rounding_mode_rte_float_32, :shader_rounding_mode_rte_float_64, :shader_rounding_mode_rtz_float_16, :shader_rounding_mode_rtz_float_32, :shader_rounding_mode_rtz_float_64, :max_update_after_bind_descriptors_in_all_pools, :shader_uniform_buffer_array_non_uniform_indexing_native, :shader_sampled_image_array_non_uniform_indexing_native, :shader_storage_buffer_array_non_uniform_indexing_native, :shader_storage_image_array_non_uniform_indexing_native, :shader_input_attachment_array_non_uniform_indexing_native, :robust_buffer_access_update_after_bind, :quad_divergent_implicit_lod, :max_per_stage_descriptor_update_after_bind_samplers, :max_per_stage_descriptor_update_after_bind_uniform_buffers, :max_per_stage_descriptor_update_after_bind_storage_buffers, :max_per_stage_descriptor_update_after_bind_sampled_images, :max_per_stage_descriptor_update_after_bind_storage_images, :max_per_stage_descriptor_update_after_bind_input_attachments, :max_per_stage_update_after_bind_resources, :max_descriptor_set_update_after_bind_samplers, :max_descriptor_set_update_after_bind_uniform_buffers, :max_descriptor_set_update_after_bind_uniform_buffers_dynamic, :max_descriptor_set_update_after_bind_storage_buffers, :max_descriptor_set_update_after_bind_storage_buffers_dynamic, :max_descriptor_set_update_after_bind_sampled_images, :max_descriptor_set_update_after_bind_storage_images, :max_descriptor_set_update_after_bind_input_attachments, :supported_depth_resolve_modes, :supported_stencil_resolve_modes, :independent_resolve_none, :independent_resolve, :filter_minmax_single_component_formats, :filter_minmax_image_component_mapping, :max_timeline_semaphore_value_difference, :framebuffer_integer_color_sample_counts), Tuple{Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag}}})
precompile(Tuple{Type{Vulkan.PhysicalDeviceVulkan12Properties}, Ptr{Nothing}, Vulkan.DriverId, String, String, Vulkan.ConformanceVersion, Vulkan.ShaderFloatControlsIndependence, Vulkan.ShaderFloatControlsIndependence, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, Bool, Bool, Bool, Bool, Bool, Bool, Bool, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Vulkan.ResolveModeFlag, Vulkan.ResolveModeFlag, Bool, Bool, Bool, Bool, UInt64, Vulkan.SampleCountFlag})
precompile(Tuple{typeof(Base.getproperty), Vulkan.PhysicalDeviceVulkan12Properties, Symbol})
precompile(Tuple{SPIRVVulkanExt.var"#3#9", Vulkan.PhysicalDeviceProperties2})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.PhysicalDeviceProperties2}})
precompile(Tuple{Type{Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}}})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Symbol, Vulkan.PhysicalDeviceProperties2})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Base.Generator{Array{Any, 1}, SPIRVVulkanExt.var"#3#9"}, Int64})
precompile(Tuple{SPIRVVulkanExt.var"#3#9", Vulkan.PhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Base.copy), Dictionaries.Dictionary{Symbol, Vulkan.PhysicalDeviceProperties2}, Type{Vulkan.HighLevelStruct}})
precompile(Tuple{typeof(Dictionaries.settokenvalue!), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Tuple{Int64, Int64}, Vulkan.PhysicalDeviceVulkan11Properties})
precompile(Tuple{typeof(Dictionaries.__dictionary), typeof(Base.first), typeof(Base.last), Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}, Base.Generator{Array{Any, 1}, SPIRVVulkanExt.var"#3#9"}, Int64})
precompile(Tuple{SPIRVVulkanExt.var"#3#9", Vulkan.PhysicalDeviceVulkan12Properties})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRVVulkanExt.var"#5#11"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}, Array{Vulkan.FeatureCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.FeatureCondition, 1}, SPIRVVulkanExt.var"#5#11"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRVVulkanExt.var"#6#12"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}, Array{Vulkan.PropertyCondition, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Vulkan.PropertyCondition, 1}, SPIRVVulkanExt.var"#6#12"{Base.VersionNumber, Dictionaries.Dictionary{Symbol, Vulkan.HighLevelStruct}}}})
precompile(Tuple{typeof(Base.in), Vulkan.SubgroupFeatureFlag, Vulkan.SubgroupFeatureFlag})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Fence, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DescriptorPool, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._DescriptorSetLayoutBindingFlagsCreateInfo}, Array{Vulkan.DescriptorBindingFlag, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DescriptorSetLayout, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.setindex!), Array{Ptr{Nothing}, 1}, Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{Nothing}}}, Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{Nothing}}}, GenericMemoryRef{:not_atomic, Ptr{Nothing}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.DescriptorSet, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.ImageViewCreateFlag}})
precompile(Tuple{Type{NamedTuple{(:access,), T} where T<:Tuple}, Tuple{Lava.MemoryAccess}})
precompile(Tuple{Type{NamedTuple{(:name,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:name, :flags), T} where T<:Tuple}, Tuple{Symbol, Lava.ResourceFlags}})
precompile(Tuple{typeof(Main.color_attachment), Lava.Device, Array{Int64, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan._ImageFormatProperties, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.ImageCreateFlag}}, Type{Vulkan._ImageCreateInfo}, Vulkan.ImageType, Vulkan.Format, Vulkan._Extent3D, UInt32, UInt32, Vulkan.SampleCountFlag, Vulkan.ImageTiling, Vulkan.ImageUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}, Vulkan.ImageLayout})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Image, Vulkan.VulkanError}})
precompile(Tuple{Type{Lava.Image}, Vulkan.Image, Array{Int64, 1}, Vulkan.ImageCreateFlag, Vulkan.Format, Int64, Int64, Int64, Vulkan.ImageUsageFlag, Array{Int64, 1}, Vulkan.SharingMode, Bool, Lava.SubresourceMap{Vulkan.ImageLayout}, Base.RefValue{Lava.Memory}, Bool})
precompile(Tuple{typeof(Base.argmax), Lava.var"#55#57"{Base.Fix{1, typeof(Lava.score), Lava.MemoryDomain}, NTuple{5, Vulkan.MemoryType}}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Vulkan.MemoryAllocateFlagsInfo}}, Type{Vulkan.MemoryAllocateInfo}, UInt64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Vulkan.MemoryAllocateFlagsInfo}}, Type{Vulkan._MemoryAllocateInfo}, UInt64, UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.MemoryAllocateFlag}}, Type{Vulkan._MemoryAllocateFlagsInfo}, UInt32})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.DeviceMemory, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.getproperty), Vulkan.MemoryType, Symbol})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Result, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.ImageView, Vulkan.VulkanError}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ShaderLibrary.var"#14#16", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, ShaderLibrary.var"#14#16"}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, ShaderLibrary.var"#14#16"}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, ShaderLibrary.var"#14#16"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.ClearValue, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Lava.ClearValue, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, ShaderLibrary.var"#14#16"}, Int64})
precompile(Tuple{Type{GeometryExperiments.Translation{3, Float32}}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{Type{GeometryExperiments.Quaternion{Float32}}, Vararg{Float32, 4}})
precompile(Tuple{StaticArrays.var"##s26#250", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#251#252"{DataType}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#251#252"{DataType}}})
precompile(Tuple{Type{GeometryExperiments.Scaling{3, Float32}}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{ShaderLibrary.var"##Camera#1", Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}, Int64, Int64, GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}, Type{ShaderLibrary.Camera}})
precompile(Tuple{Type{ShaderLibrary.ShaderParameters}, Lava.Resource})
precompile(Tuple{typeof(Base.get_bool_env), String, Bool})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{Type{NamedTuple{(:source,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.get_tls_seed)})
precompile(Tuple{typeof(Base.get!), Random.var"#1#2", Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.copy), Random.Xoshiro})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(Base.:(|)), Int32, Int32})
precompile(Tuple{EzXML.var"##parse_options#8", Bool, Bool, Bool, Bool, typeof(EzXML.parse_options)})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:noerror, :nowarning), Tuple{Bool, Bool}}})
precompile(Tuple{typeof(Base.tail), Tuple{EzXML.NodeType, EzXML.NodeType}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{EzXML._Node}}, Ptr{Nothing}})
precompile(Tuple{typeof(EzXML.readxml), String})
precompile(Tuple{typeof(Base.in), Symbol, NTuple{8, Symbol}})
precompile(Tuple{typeof(ShaderLibrary.validate_shader_stages), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.something), Nothing, Symbol})
precompile(Tuple{Type{NamedTuple{(:bold, :color), T} where T<:Tuple}, Tuple{Bool, Symbol}})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(ShaderLibrary.error_invalid_xml), String, Vararg{String}})
precompile(Tuple{typeof(Base.current_exceptions)})
precompile(Tuple{Type{Test.Threw}, Any, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{Any, 1}}}, Base.ExceptionStack})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sprint), Function, ShaderLibrary.InvalidXML})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Memory{UInt8}}, ShaderLibrary.InvalidXML})
precompile(Tuple{typeof(Base.occursin), String, String})
precompile(Tuple{typeof(ShaderLibrary.is_previous_stage), Symbol, Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copy!), Random.Xoshiro, Random.Xoshiro})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Core.memoryref), Memory{EzXML.Node}})
precompile(Tuple{Type{NamedTuple{(:symbol,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:parse,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.XMLShaderComponent}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.XMLShaderStage}})
precompile(Tuple{typeof(Base.tail), Tuple{ShaderLibrary.DataCategory, ShaderLibrary.DataCategory, ShaderLibrary.DataCategory}})
precompile(Tuple{typeof(Base.tail), Tuple{ShaderLibrary.DataCategory, ShaderLibrary.DataCategory}})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageInput}, Symbol, Symbol, SPIRV.BuiltIn})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageOutput}, Symbol, Symbol, SPIRV.BuiltIn})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.XMLShader}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.XMLShaderStageData}})
precompile(Tuple{typeof(Core.memoryref), Memory{Pair{ShaderLibrary.XMLShaderStage, Int64}}})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:from}}}, Int64})
precompile(Tuple{typeof(ShaderLibrary.generate_shaders), String, EzXML.Document})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Memory{UInt8}}, EzXML.Node})
precompile(Tuple{typeof(ShaderLibrary.generate_shaders), EzXML.Document, EzXML.Document})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageData}, Symbol, ShaderLibrary.DataCategory, Symbol, QuoteNode})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageData}, Symbol, ShaderLibrary.DataCategory, Symbol, Nothing})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageOutput}, Symbol, Symbol, Symbol, Bool, Nothing, Nothing})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageOutput}, Symbol, Symbol, Nothing, Bool, Nothing, Nothing})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageInput}, Symbol, Symbol, Nothing, Nothing})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageData}, Symbol, ShaderLibrary.DataCategory, Expr, QuoteNode})
precompile(Tuple{Type{Tuple}, NamedTuple{(:name, :type, :from, :builtin), Tuple{Symbol, Symbol, ShaderLibrary.XMLShaderStageOutput, Nothing}}})
precompile(Tuple{Type{ShaderLibrary.XMLShaderStageInput}, Symbol, Symbol, ShaderLibrary.XMLShaderStageOutput, Nothing})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:enums, :structs, :components, :shaders), Tuple{Array{Expr, 1}, Array{Expr, 1}, Array{ShaderLibrary.XMLShaderComponent, 1}, Array{ShaderLibrary.XMLShader, 1}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{ShaderLibrary.XMLShaderComponent, 1}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.length), Array{ShaderLibrary.XMLShader, 1}})
precompile(Tuple{Type{NamedTuple{(:overwrite,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:overwrite,), Tuple{Bool}}, typeof(Accessors.setmacro), Function, Expr})
precompile(Tuple{typeof(Accessors.parse_obj_optic), Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), QuoteNode, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(SPIRV.get_signature), Expr})
precompile(Tuple{SPIRV.var"#301#302", Expr})
precompile(Tuple{Type{Array{Symbol, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#301#302"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{NamedTuple{(:focal_length,), T} where T<:Tuple}, Tuple{Float32}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:focal_length,), Tuple{Float32}}, Type{ShaderLibrary.Camera}})
precompile(Tuple{typeof(ShaderLibrary.focal_length), ShaderLibrary.Camera})
precompile(Tuple{typeof(ShaderLibrary.field_of_view), ShaderLibrary.Camera})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Float32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, GeometryExperiments.Degree})
precompile(Tuple{typeof(Base.max), Float32, Float32})
precompile(Tuple{typeof(Base.isapprox), Float32, Float32})
precompile(Tuple{typeof(ShaderLibrary.focal_length), Float32})
precompile(Tuple{typeof(Base.isapprox), Float64, Float32})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Base.HasLength, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{DataType, DataType}})
precompile(Tuple{typeof(ShaderLibrary.project), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, ShaderLibrary.Camera})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.Camera, Symbol})
precompile(Tuple{typeof(Base.getproperty), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Symbol})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:z}}}, Int64})
precompile(Tuple{ConstructionBaseStaticArraysExt.var"##s1#1", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.issubset), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Enumerate{Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ConstructionBaseStaticArraysExt.var"#2#3"{Tuple{Symbol}}, Base.Iterators.Enumerate{Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Tuple{Symbol, Symbol, Symbol}}, ConstructionBaseStaticArraysExt.var"#2#3"{Tuple{Symbol}}}})
precompile(Tuple{typeof(EzXML.finalize_node), EzXML.Node})
precompile(Tuple{typeof(EzXML.finalize_buffer), EzXML.Buffer})
precompile(Tuple{typeof(Accessors.set), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Accessors.PropertyLens{:z}, Float32})
precompile(Tuple{typeof(Base.:(==)), Float32, Int64})
precompile(Tuple{typeof(Base.:(==)), Float32, Float64})
precompile(Tuple{Type{NamedTuple{(:interp,), T} where T<:Tuple}, Tuple{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:attach_after,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:final,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{Any, Tuple{Bool, Bool}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:fill_tmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Bool}, Base.Val{2}})
precompile(Tuple{typeof(Base.in), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.ResultID}})
precompile(Tuple{Type{Base.Fix{1, F, T} where T where F}, Type{Base.MappingRF{F, T} where T where F}, Type})
precompile(Tuple{StaticArraysCore.var"##s4#1", Vararg{Any, 9}})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArraysCore.var"#2#3", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.:(*)), Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64}})
precompile(Tuple{StaticArraysCore.var"##s4#4", Vararg{Any, 5}})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.hash), Type, UInt64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{Type{Base.Returns{V} where V}, Base.OneTo{Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Regex, String})
precompile(Tuple{Type{NamedTuple{(:op,), T} where T<:Tuple}, Tuple{SPIRV.OpCode}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:required,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:interp,), Tuple{SPIRV.SPIRVInterpreter}}, typeof(SPIRV.compile), Any, Any, SPIRV.AllSupported})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), SPIRV.SPIRVInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Core.Compiler.finishinfer!), Core.Compiler.InferenceState, SPIRV.SPIRVInterpreter})
precompile(Tuple{typeof(Core.Compiler.cache_result!), SPIRV.SPIRVInterpreter, Core.Compiler.InferenceResult})
precompile(Tuple{typeof(Core.Compiler.optimize), SPIRV.SPIRVInterpreter, Core.Compiler.OptimizationState{SPIRV.SPIRVInterpreter}, Core.Compiler.InferenceResult})
precompile(Tuple{typeof(Core.Compiler.finish!), SPIRV.SPIRVInterpreter, Core.Compiler.InferenceState})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), SPIRV.SPIRVInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.IRInterpretationState, Int64})
precompile(Tuple{typeof(Core.Compiler.builtin_tfunction), SPIRV.SPIRVInterpreter, Any, Array{Any, 1}, Core.Compiler.IRInterpretationState})
precompile(Tuple{typeof(Core.Compiler.from_interprocedural!), SPIRV.SPIRVInterpreter, Any, Core.Compiler.InferenceState, Core.Compiler.ArgInfo, Any})
precompile(Tuple{typeof(SPIRV.unsigned_index), UInt32})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect), Core.SimpleVector})
precompile(Tuple{typeof(Base.convert), Type{Any}, Any})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.SimpleTree{Int64}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Int64, 1}, SPIRV.var"#137#138"{Array{Base.Set{Int64}, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Int64, 1}, SPIRV.var"#137#138"{Array{Base.Set{Int64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Set{Int64}, 1}, Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.findall), SPIRV.var"#303#304", Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{Core.Argument}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Core.Argument}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}, Base.OneTo{Int64}, Array{Core.Argument, 1}})
precompile(Tuple{typeof(Core.memoryref), Memory{Core.Argument}})
precompile(Tuple{Type{SPIRV.BijectiveMapping{T1, T2} where T2 where T1}, Dictionaries.Dictionary{Int64, Core.Argument}})
precompile(Tuple{Type{SPIRV.Translation}, Array{Any, 1}, SPIRV.BijectiveMapping{Int64, Core.Argument}, SPIRV.TypeMap, Dictionaries.Dictionary{Any, Any}})
precompile(Tuple{typeof(Core.memoryref), Memory{Union{SPIRV.Constant, SPIRV.Variable}}})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.SPIRType}})
precompile(Tuple{SPIRV.var"##spir_type#18", Nothing, Bool, typeof(SPIRV.spir_type), DataType, SPIRV.TypeMap})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.FloatType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SPIRV.spir_type), Type, SPIRV.TypeMap})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{Float32}}, Base.Iterators.Rest{Tuple{DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.FloatType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.ArrayType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{GeometryExperiments.Translation{3, Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{GeometryExperiments.Quaternion{Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{GeometryExperiments.Scaling{3, Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.Camera}, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.hash), UInt32, UInt64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.push!), Array{UInt64, 1}, UInt64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FunctionType, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, Expr, Type, SPIRV.Block})
precompile(Tuple{typeof(SPIRV.get_field_index), Core.Argument, QuoteNode, SPIRV.Translation, SPIRV.SPIRVTarget})
precompile(Tuple{typeof(Base.getindex), SPIRV.TypeMap, DataType})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{Core.Argument, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Any, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Int64, UInt32})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), UInt32})
precompile(Tuple{typeof(Base.getproperty), GlobalRef, Symbol})
precompile(Tuple{typeof(SPIRV.follow_globalref), Any})
precompile(Tuple{typeof(Base.collect), Type{Any}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Float32})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float32})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float32})
precompile(Tuple{typeof(Base.getproperty), Core.GotoIfNot, Symbol})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix{2, typeof(Base.:(==)), Symbol}, Int64, NTuple{5, Symbol}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.StructType, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.StructType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{typeof(SPIRV.get_field_index), Core.SSAValue, QuoteNode, SPIRV.Translation, SPIRV.SPIRVTarget})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix{2, typeof(Base.:(==)), Symbol}, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{Core.SSAValue, Int64}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.Constant, 1}, Int64})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Int64})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Int64})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Int64})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getproperty), Core.ReturnNode, Symbol})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Bool})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Bool})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Bool})
precompile(Tuple{typeof(Core.memoryref), Memory{Pair{Int64, SPIRV.Expression}}})
precompile(Tuple{SPIRV.var"#495#496"{SPIRV.IR, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.ResultID}}, SPIRV.ResultID})
precompile(Tuple{SPIRV.var"#483#486"{SPIRV.IR, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.ResultID}}, SPIRV.ResultID})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, SPIRV.var"#483#486"{SPIRV.IR, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.ResultID}}}, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Memory{UInt8}}, SPIRV.OpCode})
precompile(Tuple{typeof(SPIRV.builtin_type), SPIRV.IR, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#489#492"{typeof(SPIRV.UConvert), DataType}, Int64})
precompile(Tuple{typeof(Base.get!), SPIRV.var"#484#487"{SPIRV.IR}, SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 1}, UInt32, Base.Generator{Array{Any, 1}, SPIRV.var"#483#486"{SPIRV.IR, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.ResultID}}}, Int64})
precompile(Tuple{Type{Tuple}, NamedTuple{(:op, :type, :result, :args), Tuple{SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Block, SPIRV.Expression, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Instruction}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.AddressingModel, SPIRV.MemoryModel}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{CEnum.Cenum{UInt32}, 1}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FunctionType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.BooleanType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.StructType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.ArrayType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.FloatType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.ArrayType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.FunctionType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.Constant})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.FloatType}})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.VectorType}})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.IntegerType}})
precompile(Tuple{typeof(Base.vect), UInt32})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType, Nothing})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.ArrayType}})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.StructType}})
precompile(Tuple{SPIRV.var"#49#50"{SPIRV.GlobalsInfo}, SPIRV.VectorType})
precompile(Tuple{SPIRV.var"#49#50"{SPIRV.GlobalsInfo}, SPIRV.StructType})
precompile(Tuple{SPIRV.var"#49#50"{SPIRV.GlobalsInfo}, SPIRV.FloatType})
precompile(Tuple{SPIRV.var"#49#50"{SPIRV.GlobalsInfo}, SPIRV.ArrayType})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.FunctionType}})
precompile(Tuple{SPIRV.var"#51#52"{SPIRV.GlobalsInfo}, SPIRV.VectorType})
precompile(Tuple{SPIRV.var"#51#52"{SPIRV.GlobalsInfo}, SPIRV.StructType})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType, Nothing})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Array{Int64, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Base.ReinterpretArray{UInt32, 1, Int64, Array{Int64, 1}, false}})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.BooleanType}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType, Nothing})
precompile(Tuple{SPIRV.var"#55#56", Tuple{SPIRV.ResultID, SPIRV.VectorType}})
precompile(Tuple{SPIRV.var"#55#56", Tuple{SPIRV.ResultID, SPIRV.StructType}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType, Nothing})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType, Nothing})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType, Nothing})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.AnnotatedFunction}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.AddressingModel})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.MemoryModel})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.AddressingModel})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.MemoryModel})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), String})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.FunctionControl})
precompile(Tuple{Type{UInt32}, SPIRV.FunctionControl})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#23#24", Array{SPIRV.FunctionControl, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.FunctionControl, 1}, SPIRV.var"#23#24"}})
precompile(Tuple{typeof(Base.vcat)})
precompile(Tuple{typeof(Base.getproperty), Base.Set{DataType}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Cmd, Symbol})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.IR})
precompile(Tuple{Lava.var"#204#205"{Vulkan.DebugUtilsMessageSeverityFlagEXT, String}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Core.memoryref), Memory{Array{Pair{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.convert), Type{String}, String})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{Memory{UInt8}}})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{typeof(Base.tryparse_internal), Type{Int64}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Memory{UInt8}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{Base.var"#909#910"{Base.PipeEndpoint, Base.GenericIOBuffer{Memory{UInt8}}, Base.PipeEndpoint}})
precompile(Tuple{Base.var"#909#910"{Base.PipeEndpoint, Base.PipeEndpoint, Base.GenericIOBuffer{Memory{UInt8}}}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Bool, SPIRV.ValidationError}})
precompile(Tuple{Type{ShaderLibrary.Light{Float32}}, ShaderLibrary.LightType, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}, Float64})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.Light{Float32}, Symbol})
precompile(Tuple{StaticArrays.var"##s26#319", Vararg{Any, 4}})
precompile(Tuple{StaticArrays.var"##s26#318", Vararg{Any, 4}})
precompile(Tuple{typeof(LinearAlgebra.normalize), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64}}, 1}, Base.Generator{Core.SimpleVector, StaticArrays.var"#166#168"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Vararg{Int64}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{}}})
precompile(Tuple{typeof(ShaderLibrary.radiance), ShaderLibrary.Light{Float32}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64}}})
precompile(Tuple{JSON3.var"##s57#23", Vararg{Any, 9}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Accessor}})
precompile(Tuple{typeof(Base.ifelse), Bool, Int64, Int64})
precompile(Tuple{typeof(Parsers.getx), Float64, Nothing})
precompile(Tuple{Type{NamedTuple{(:precision,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), UInt64, UInt64})
precompile(Tuple{typeof(Base.signed), UInt64})
precompile(Tuple{typeof(Base.:(>)), UInt64, UInt64})
precompile(Tuple{Type{NamedTuple{(:allow_inf,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Animation}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Channel}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.AnimationSampler}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Buffer}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.BufferView}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Camera}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Image}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Material}})
precompile(Tuple{typeof(Core.memoryref), Memory{Float32}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Mesh}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Primitive}})
precompile(Tuple{typeof(Core.memoryref), Memory{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Node}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Sampler}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Scene}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Skin}})
precompile(Tuple{typeof(Core.memoryref), Memory{GLTF.Texture}})
precompile(Tuple{typeof(Main.read_gltf), String})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Asset, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Scene, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Node, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Camera, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Perspective, Symbol})
precompile(Tuple{typeof(Base.getproperty), GLTF.Object, Symbol})
precompile(Tuple{typeof(Base.Iterators.only), GLTF.ZVector{GLTF.Node}})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{NTuple{4, Symbol}}, Int64})
precompile(Tuple{typeof(StaticArrays._Length), Int64, Vararg{Int64}})
precompile(Tuple{StaticArrays.var"##s26#85", Vararg{Any, 4}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#86#87"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#86#87"}, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, T, 1, 3} where T}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArraysCore.Size{()}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{}, Type{StaticArraysCore.Size{()}}, Type})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArraysCore.Size{()}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{}, Type{StaticArraysCore.Size{()}}, Type})
precompile(Tuple{Type{Array{Expr, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isempty), Array{Expr, 2}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#157#158"{Array{Int64, 1}, Core.SimpleVector}}, Int64})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}, Int64})
precompile(Tuple{StaticArrays.var"##s26#187", Vararg{Any, 8}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#188#190"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#189#191"{Int64}}})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArraysCore.Size{(3,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{Int64}, Type{StaticArraysCore.Size{()}}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArraysCore.Size{(3,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{Int64}, Type{StaticArraysCore.Size{()}}})
precompile(Tuple{StaticArrays.var"##s26#32", Any, Any})
precompile(Tuple{typeof(Base.any), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._any), StaticArrays.var"#33#34", Core.SimpleVector, Base.Colon})
precompile(Tuple{StaticArrays.var"#33#34", Type})
precompile(Tuple{StaticArrays.var"##s26#39", Vararg{Any, 4}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Core.SimpleVector, Tuple{DataType, DataType}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Core.SimpleVector, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{StaticArrays.var"#40#41"{Array{Any, 1}}}, Base.Iterators.Zip{Tuple{Core.SimpleVector, Tuple{DataType, DataType}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Core.SimpleVector, Tuple{DataType, DataType}}}, Base.var"#4#5"{StaticArrays.var"#40#41"{Array{Any, 1}}}}})
precompile(Tuple{Base.var"#4#5"{StaticArrays.var"#40#41"{Array{Any, 1}}}, Tuple{Int64, DataType}})
precompile(Tuple{typeof(Base._any_tuple), Function, Bool})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Core.Compiler.setindex!), Array{Core.Compiler.CallInfo, 1}, Core.Compiler.InvokeCallInfo, Int64})
precompile(Tuple{typeof(StaticArrays.unwrap), StaticArrays.StaticIndexing{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}})
precompile(Tuple{typeof(Base.iterate), StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, StaticArrays.SOneTo{4}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}, Tuple{StaticArrays.SOneTo{3}, Int64}})
precompile(Tuple{typeof(Base.tail), Tuple{StaticArrays.StaticIndexing{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}, StaticArrays.StaticIndexing{Int64}}})
precompile(Tuple{typeof(Base.checkbounds_indices), Type{Bool}, Tuple{StaticArrays.SOneTo{4}}, Tuple{StaticArrays.StaticIndexing{Int64}}})
precompile(Tuple{typeof(Base.rm_singleton_indices), Tuple{Bool, Bool}, StaticArrays.StaticIndexing{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}, StaticArrays.StaticIndexing{Int64}})
precompile(Tuple{StaticArrays.var"##s26#268", Vararg{Any, 6}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#269#270", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#269#270"}})
precompile(Tuple{StaticArrays.var"##s26#130", Vararg{Any, 6}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{0}, typeof(Base.identity), Tuple{Int64}, Tuple{StaticArrays.SOneTo{3}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.identity), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Base.reindex), Tuple{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float32})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(4, 4)}, StaticArraysCore.Size{(4, 4)}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{StaticArrays.var"##s26#524", Vararg{Any, 9}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{StaticArrays.var"##s26#514", Vararg{Any, 7}})
precompile(Tuple{StaticArrays.var"##s26#515", Any, Any, Any})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{StaticArrays.var"##s26#585", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#586#587", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#586#587"}})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{Int64}, Type{StaticArraysCore.Size{(4,)}}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{Base.Colon}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Expr, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#157#158"{Array{Int64, 1}, Core.SimpleVector}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Type{StaticArraysCore.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArraysCore.Size{(1,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArraysCore.Size{(1,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}, StaticArrays.SOneTo{4}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(1, 4)}, Int64})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Base.:(==)), Type, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(3, 3)}, StaticArraysCore.Size{(3, 3)}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{2}, Int64, 1, 2}, Int64})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArraysCore.Size{(2,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArraysCore.Size{(2,)}}, Vararg{Type{var"#s26"} where var"#s26"<:(StaticArraysCore.Size{S} where S)}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{StaticArraysCore.SArray{Tuple{2}, Int64, 1, 2}}})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}, StaticArrays.SOneTo{3}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(1, 3)}, Int64})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(2, 2)}, StaticArraysCore.Size{(2, 2)}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1}, Int64, 1, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{1}, Int64, 1, 1}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{StaticArraysCore.SArray{Tuple{1}, Int64, 1, 1}}})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(1,)}, StaticArraysCore.Size{(1,)}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}}, Tuple{Float64}})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}, StaticArrays.SOneTo{2}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(1, 2)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(1,)}, Int64})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(1, 1)}, StaticArraysCore.Size{(1, 1)}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, 1}, T, 2, L} where L where T}, Float64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{S}, T, 1, S} where T where S}, Int64})
precompile(Tuple{StaticArrays.var"##s26#135", Vararg{Any, 5}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#136#137", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#136#137"}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.Checked.checked_mul)}, Symbol})
precompile(Tuple{StaticArrays.var"##s26#111", Vararg{Any, 7}})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#112#115", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#112#115"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#113#116", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#113#116"}})
precompile(Tuple{typeof(Base.vcat), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1}, T, 1, 1} where T}, Float64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}, StaticArrays.SOneTo{1}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(1, 1)}, Int64})
precompile(Tuple{typeof(Base.checkbounds), StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}, Int64, Int64})
precompile(Tuple{typeof(StaticArrays._getindex_scalar), StaticArraysCore.Size{(1, 1)}, StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}, Int64, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, S2}, T, 2, L} where L where T where S2}, StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}}, Tuple{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#114#117"{DataType, DataType}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, StaticArrays.var"#114#117"{DataType, DataType}}})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}}, Int64})
precompile(Tuple{typeof(Base.vcat), StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}, StaticArraysCore.SArray{Tuple{1, 1}, Float64, 2, 1}})
precompile(Tuple{StaticArrays.var"##s26#118", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#119#121", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#119#121"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#120#122", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#120#122"}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(2, 1)}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{1, 2}, Float64, 2, 2}}, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, S2}, T, 2, L} where L where T where S2}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, 2}, Float64, 2, 2}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.:(*)), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(3, 2)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(2, 3)}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{1, 3}, Float64, 2, 3}}, Int64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{2}, StaticArrays.SOneTo{3}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, S2}, T, 2, L} where L where T where S2}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1, 3}, Float64, 2, 3}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(4, 3)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.Size{(3, 4)}, Int64})
precompile(Tuple{typeof(Base.size), Type{StaticArraysCore.SArray{Tuple{1, 4}, Float64, 2, 4}}, Int64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{3}, StaticArrays.SOneTo{4}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{StaticArrays.var"##s26#511", Vararg{Any, 5}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#512#513", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#512#513"}})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#165#166", Bool, StaticArrays.SOneTo{4}, StaticArrays.SOneTo{4}})
precompile(Tuple{Type{NamedTuple{(:check,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{StaticArrays.var"##s26#305", Vararg{Any, 4}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.HasShape{2}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 2}, Symbol, Int64})
precompile(Tuple{typeof(StaticArrays._scalar_matrix_elements), StaticArraysCore.Size{(4, 4)}, Int64})
precompile(Tuple{typeof(StaticArrays._construct_sametype), Type{StaticArraysCore.SArray{Tuple{4, 4}, Int64, 2, 16}}, NTuple{16, Int64}})
precompile(Tuple{StaticArrays.var"##s26#150", Vararg{Any, 6}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#151#152", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#151#152"}})
precompile(Tuple{typeof(StaticArrays.out_index_size), Type{StaticArraysCore.Size{(4,)}}, Vararg{Type{StaticArraysCore.Size{(4,)}}}})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{}, Type{StaticArraysCore.Size{(4,)}}, Type})
precompile(Tuple{typeof(StaticArrays._out_index_size), Tuple{Int64}, Type{StaticArraysCore.Size{(4,)}}})
precompile(Tuple{typeof(StaticArrays.linear_index_size), Type{StaticArraysCore.Size{(4,)}}, Vararg{Type{StaticArraysCore.Size{(4,)}}}})
precompile(Tuple{typeof(StaticArrays._linear_index_size), Tuple{}, Type{StaticArraysCore.Size{(4,)}}, Type})
precompile(Tuple{typeof(StaticArrays._ind), Int64, Int64, Type{StaticArraysCore.SArray{Tuple{4}, Int64, 1, 4}}})
precompile(Tuple{StaticArrays.var"##s26#542", Vararg{Any, 9}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#543#546", Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, StaticArrays.var"#543#546"}})
precompile(Tuple{typeof(StaticArrays.gen_by_access), StaticArrays.var"#544#547"{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Base.UnitRange{Int64}, Bool, Bool, Array{Symbol, 2}, Int64, Int64}, Type{StaticArraysCore.MArray{Tuple{4, 4}, Float32, 2, 16}}, Symbol})
precompile(Tuple{Type{LinearAlgebra.SingularException}, Int64})
precompile(Tuple{typeof(StaticArrays.gen_by_access), StaticArrays.var"#544#547"{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Bool, Bool, Array{Symbol, 2}, Int64, Int64}, Type{StaticArraysCore.MArray{Tuple{4, 4}, Float64, 2, 16}}, Symbol})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{StaticArrays.var"##s26#315", Vararg{Any, 6}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:step, :length), Tuple{Int64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#316#317", Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{Int64, Int64}, StaticArrays.var"#316#317"}})
precompile(Tuple{typeof(Core.Compiler.dominates_ssa), Core.Compiler.IncrementalCompact, Core.Compiler.GenericDomTree{false}, Core.Compiler.NewSSAValue, Core.Compiler.NewSSAValue})
precompile(Tuple{typeof(Base.isnothing), GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}})
precompile(Tuple{typeof(Base.something), GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(LinearAlgebra.norm), Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{S}, T, 1, S} where T where S}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}, StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{typeof(LinearAlgebra.norm_sqr), Int64})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{3}, Int64, 1, 3}}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{3}, T, 1, 3} where T}, Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(Base.iszero), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(SymbolicGA.getcomponent), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float32, Float64})
precompile(Tuple{typeof(SymbolicGA.construct), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Float64, Int64}})
precompile(Tuple{typeof(SymbolicGA.construct), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Int64, Float64}})
precompile(Tuple{typeof(SymbolicGA.construct), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm_sqr), Float32})
precompile(Tuple{typeof(Base.isfinite), Float32})
precompile(Tuple{typeof(Base.inv), Float32})
precompile(Tuple{typeof(Base.:(*)), Float32, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(SymbolicGA.getcomponent), Float32})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArrays.SOneTo{4}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArrays.SOneTo{4}, Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryExperiments.Quaternion{T} where T}, GeometryExperiments.RotationPlane{3, Float32}, Float32})
precompile(Tuple{typeof(Base.getproperty), GeometryExperiments.Quaternion{Float32}, Symbol})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}, Float32})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}, Float32}}})
precompile(Tuple{Type{GeometryExperiments.Quaternion{T} where T}, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}})
precompile(Tuple{typeof(Base.indexed_iterate), GeometryExperiments.Quaternion{Float32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), GeometryExperiments.Quaternion{Float32}, Int64, Tuple{StaticArrays.SOneTo{4}, Int64}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float32, Base.Val{2}})
precompile(Tuple{typeof(Base.:(-)), Float32, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3, 3}, T, 2, L} where L where T}, NTuple{9, Float32}})
precompile(Tuple{Type{NamedTuple{(:apply_rotation,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(ShaderLibrary.import_transform), GLTF.Node})
precompile(Tuple{Type{GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}}, GeometryExperiments.Translation{3, Float32}, GeometryExperiments.Quaternion{Float32}, GeometryExperiments.Scaling{3, Float32}})
precompile(Tuple{typeof(Base.getproperty), GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}, Symbol})
precompile(Tuple{Type{GeometryExperiments.Quaternion{Float32}}, Vararg{Float64, 4}})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Mesh, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Primitive, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Accessor, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.BufferView, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Buffer, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:apply_rotation,), Tuple{Bool}}, typeof(ShaderLibrary.import_transform), GLTF.Node})
precompile(Tuple{typeof(ShaderLibrary.import_camera), GLTF.Object})
precompile(Tuple{Type{GeometryExperiments.Translation{Dim, T} where T where Dim}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Array{Float32, 1}})
precompile(Tuple{Type{GeometryExperiments.Translation{Dim, T} where T where Dim}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{Type{GeometryExperiments.Translation{Dim, T} where T where Dim}, Float32, Vararg{Float32}})
precompile(Tuple{Type{NamedTuple{(:aspect_ratio, :sensor_size), T} where T<:Tuple}, Tuple{Float64, Float32}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:aspect_ratio, :sensor_size), Tuple{Float64, Float32}}, typeof(ShaderLibrary.horizontal_field_of_view), Float32})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.Light{Float32}}})
precompile(Tuple{typeof(ShaderLibrary.import_lights), GLTF.Object})
precompile(Tuple{typeof(ShaderLibrary.light_type), String})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Array{Any, 1}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{ShaderLibrary.Light{Float32}}, ShaderLibrary.LightType, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float64})
precompile(Tuple{typeof(Base.length), Array{ShaderLibrary.Light{Float32}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ShaderLibrary.Light{Float32}, 1}, Int64})
precompile(Tuple{typeof(ShaderLibrary.import_mesh), GLTF.Object})
precompile(Tuple{typeof(GeometryExperimentsGLTFExt.read_data), Type{UInt16}, GLTF.Object, GLTF.BufferView})
precompile(Tuple{typeof(Base.eof), Base.GenericIOBuffer{Memory{UInt8}}})
precompile(Tuple{typeof(GeometryExperimentsGLTFExt.read_data), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, GLTF.Object, GLTF.BufferView})
precompile(Tuple{typeof(ShaderLibrary.y_up_to_z_up!), GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}})
precompile(Tuple{typeof(GeometryExperiments.nv), GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}})
precompile(Tuple{typeof(Base.lastindex), GLTF.ZVector{GLTF.Node}})
precompile(Tuple{typeof(Base.getindex), GLTF.ZVector{GLTF.Node}, Int64})
precompile(Tuple{Type{BinaryParsingTools.Tag{N} where N}, String})
precompile(Tuple{Type{BinaryParsingTools.Tag{4}}, String})
precompile(Tuple{typeof(Base.getindex), Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:vertex_data,), T} where T<:Tuple}, Tuple{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:vertex_data,), Tuple{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}}, Type{GeometryExperiments.VertexMesh{I, VL, VN, VD} where VD where VN where VL where I}, Base.UnitRange{Int64}, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}})
precompile(Tuple{Type{GeometryExperiments.Translation{3, Float64}}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{Type{GeometryExperiments.Quaternion{Float64}}, Vararg{Float64, 4}})
precompile(Tuple{Type{GeometryExperiments.Scaling{3, Float64}}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{Int64, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, GeometryExperiments.FaceOrientation})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.ClearValue}})
precompile(Tuple{Type{ShaderLibrary.ShaderParameters}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.min)}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(ShaderLibrary.data_container), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(ShaderLibrary.data_container), Tuple{Tuple{DataType, DataType, DataType}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(ShaderLibrary.data_container), Tuple{Tuple{DataType, DataType, DataType}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Tuple{DataType, DataType, DataType}}, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}})
precompile(Tuple{StaticArrays.var"##s26#84", Any, Any, Any})
precompile(Tuple{typeof(Base.isqrt), Int64})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Lava.DeviceAddress}, Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{typeof(Base.last)}}, Tuple{Symbol}})
precompile(Tuple{Type{Lava.Command}, ShaderLibrary.Gradient, ShaderLibrary.ShaderParameters, Lava.Device, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Memory{UInt8}}, ArgumentError})
precompile(Tuple{typeof(Base.:(==)), SPIRV.ExecutionModel, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.in), SPIRV.ExecutionModel, Tuple{SPIRV.ExecutionModel, SPIRV.ExecutionModel}})
precompile(Tuple{typeof(Base.iterate), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{Array{SPIRV.ResultID, 1}}})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Variable}})
precompile(Tuple{typeof(Base.tail), Tuple{SPIRV.StorageClass, SPIRV.StorageClass}})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:eltype}}}, Int64})
precompile(Tuple{typeof(Base.tail), Tuple{SPIRV.StorageClass, SPIRV.StorageClass, SPIRV.StorageClass}})
precompile(Tuple{Type{NamedTuple{(:is_specialization_constant,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:value}}}, Int64})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:local_size}}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SPIRV.FPFastMathMode})
precompile(Tuple{Type{NamedTuple{(:maxdepth,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{StructEquality.var"##s6#16", Vararg{Any, 4}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StructEquality.var"#17#18", NTuple{6, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldr), Function, Base.Generator{NTuple{6, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Expr, Base.Generator{NTuple{6, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{NTuple{6, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}, Base.Generator{Base.Generator{NTuple{6, Symbol}, StructEquality.var"#17#18"}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{StructEquality.var"#17#18", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.FlipArgs{StructEquality.var"#combine#19"}, Symbol})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{StructEquality.var"#17#18", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}}, Expr, NTuple{6, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StructEquality.var"#17#18", Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldr), Function, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Expr, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}, Base.Generator{Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#17#18"}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{StructEquality.var"#17#18", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}}, Expr, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._bool), Base.Fix{2, typeof(Base.:(==)), Char}})
precompile(Tuple{Type{NamedTuple{(:ext,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:color, :ext), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{Type{NamedTuple{(:binary,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:ir}}}, Int64})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.Gradient}, Lava.Device})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Metadata}})
precompile(Tuple{typeof(Base.xor), UInt64, UInt64})
precompile(Tuple{typeof(Base.get!), SPIRV.var"#346#347"{Bool, Bool, SPIRV.ShaderInfo}, Base.Dict{UInt64, SPIRV.ShaderSource}, UInt64})
precompile(Tuple{Core.Compiler.var"##analyze_method!#522", Bool, Array{Any, 1}, Core.Compiler.VolatileInferenceResult, typeof(Core.Compiler.analyze_method!), Core.MethodMatch, Array{Any, 1}, Core.Compiler.CallInfo, UInt32, Core.Compiler.InliningState{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Float32, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{2}, Int64})
precompile(Tuple{SPIRVSwizzlesExt.var"##s1#1", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{4}, Int64})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.PointerType, SPIRV.StorageClass})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mutable{StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}, SPIRV.PointerType})
precompile(Tuple{Type{Tuple}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.VectorType}}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalRef{ShaderLibrary.InvocationData}}, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.emit!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRType})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.ModuleTarget, SPIRV.ResultID, SPIRV.Decoration})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalBuffer{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.IntegerType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.InvocationData}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.InvocationData}}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.StructType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{9, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix{2, typeof(Base.:(==)), Symbol}, Int64, NTuple{9, Symbol}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, UInt32})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, UInt32})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.getproperty), Core.GotoNode, Symbol})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, Core.PhiNode, Type, SPIRV.Block})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Core.SSAValue})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VectorType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Float32, Core.SSAValue}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.OpCodeGLSL})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, UInt32}})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, Dictionaries.Dictionary{Symbol, Array{SPIRV.ResultID, 1}}, SPIRV.FunctionDefinition, Dictionaries.Dictionary{Int64, Union{SPIRV.Constant, SPIRV.Variable}}, Array{SPIRV.Variable, 1}, SPIRV.ExecutionModel, SPIRV.CommonExecutionOptions})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.PointerType})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.SimpleTree{SPIRV.DominatorNode}}})
precompile(Tuple{typeof(SPIRV.update_control_tree!), Dictionaries.Dictionary{Int64, SPIRV.SimpleTree{SPIRV.ControlNode}}, Int64, Array{Int64, 1}, SPIRV.RegionType})
precompile(Tuple{Type{SPIRV.SimpleTree{T} where T}, SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}})
precompile(Tuple{typeof(Graphs.outneighbors), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Graphs.merge_vertices!), SPIRV.DeltaGraph{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.in), SPIRV.ResultID, Base.Set{SPIRV.ResultID}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType, Nothing})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{SPIRV.SPIRType, SPIRV.Metadata}, SPIRV.StructType, SPIRV.Metadata})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.FloatType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.VectorType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.PointerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.StructType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.ArrayType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.BooleanType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.PointerType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.BooleanType})
precompile(Tuple{typeof(SPIRV.satisfy_requirements!), SPIRV.IR, SPIRV.SupportedFeatures})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.Decoration, SPIRV.BuiltIn}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.PointerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.PointerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.VoidType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.VoidType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.Variable})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.PointerType}})
precompile(Tuple{SPIRV.var"#49#50"{SPIRV.GlobalsInfo}, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#51#52"{SPIRV.GlobalsInfo}, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.VoidType}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType})
precompile(Tuple{SPIRV.var"#55#56", Tuple{SPIRV.ResultID, SPIRV.IntegerType}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType, Nothing})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.Decoration})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.StorageClass})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.StorageClass})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.SelectionControl})
precompile(Tuple{Type{UInt32}, SPIRV.SelectionControl})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#23#24", Array{SPIRV.SelectionControl, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.SelectionControl, 1}, SPIRV.var"#23#24"}})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration, Int64})
precompile(Tuple{typeof(SPIRV.element_stride), SPIRV.VulkanLayout, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.TypeMetadata, SPIRV.ArrayType, SPIRV.Decoration, Int64})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(SPIRV.base_alignment), Function, SPIRV.VectorType})
precompile(Tuple{typeof(Base.:(*)), UInt32, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.StructType, SPIRV.Metadata})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ArrayType, SPIRV.Metadata})
precompile(Tuple{typeof(Base.get!), Lava.var"#79#80"{Lava.ShaderCache, SPIRV.ShaderSource}, Base.IdDict{SPIRV.ShaderSource, Lava.Shader}, Any})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.ShaderModule, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.PushConstantRange}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.SpecializationInfo}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{SPIRV.ShaderSource, Lava.Shader}, Any, Any})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, Dictionaries.Dictionary{Symbol, Array{SPIRV.ResultID, 1}}, SPIRV.FunctionDefinition, Dictionaries.Dictionary{Int64, Union{SPIRV.Constant, SPIRV.Variable}}, Array{SPIRV.Variable, 1}, SPIRV.ExecutionModel, SPIRV.FragmentExecutionOptions})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.ExecutionMode})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.ExecutionMode})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Type, Lava.Program}, Any, Any})
precompile(Tuple{typeof(GeometryExperiments.apply_transform), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}})
precompile(Tuple{typeof(Base.push!), Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(GeometryExperiments.apply_rotation), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, GeometryExperiments.Quaternion{Float64}})
precompile(Tuple{typeof(Base.sizehint!), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(SPIRV.serialize_array!), Array{UInt8, 1}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, SPIRV.VulkanLayout, Int64})
precompile(Tuple{typeof(Base.Iterators.peel), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.isnothing), Tuple{DataType, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{Float32, Float32, Float32}, Int64})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{Float32}}, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{typeof(SPIRV.element_stride), SPIRV.VulkanLayout, SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.padding), SPIRV.VulkanLayout, Type, Int64})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{Float32, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, GeometryExperiments.Scaling{3, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.PhysicalBuffer{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.Camera, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{Float32, Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, GeometryExperiments.Translation{3, Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, GeometryExperiments.Quaternion{Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, NTuple{4, Float32}, Int64})
precompile(Tuple{typeof(Base.allequal), NTuple{4, DataType}})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{Float32}}, Base.Iterators.Rest{NTuple{4, DataType}, Int64}, Base.Colon})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, GeometryExperiments.Scaling{3, Float32}, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.ResourceDependency}})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.BufferCreateFlag}})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{Vulkan.CommandBufferUsageFlag}})
precompile(Tuple{Type{NamedTuple{(:name, :flags), T} where T<:Tuple}, Tuple{Nothing, Lava.ResourceFlags}})
precompile(Tuple{Type{NamedTuple{(:samples,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.isnothing), Vulkan.ImageCreateFlag})
precompile(Tuple{typeof(Base.something), Vulkan.ImageCreateFlag})
precompile(Tuple{Type{NamedTuple{(:next, :flags), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Vulkan.SamplerCreateFlag}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StructEquality.var"#17#18", NTuple{17, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldr), Function, Base.Generator{NTuple{17, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Expr, Base.Generator{NTuple{17, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{NTuple{17, Symbol}, StructEquality.var"#17#18"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}, Base.Generator{Base.Generator{NTuple{17, Symbol}, StructEquality.var"#17#18"}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{StructEquality.var"#17#18", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#19"}}}, Expr, NTuple{17, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type, Vulkan.IndexType})
precompile(Tuple{typeof(Lava.render), Lava.Device, Lava.Command})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.BufferCreateFlag}}, Type{Vulkan._BufferCreateInfo}, UInt64, Vulkan.BufferUsageFlag, Vulkan.SharingMode, Array{UInt32, 1}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Buffer, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Ptr{Nothing}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands, :name), Tuple{Vulkan.PipelineStageFlag2, Lava.RenderArea, Array{Lava.Command, 1}, Nothing}}, Type{Lava.RenderNode}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.CommandPool, Vulkan.VulkanError}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Array{Vulkan.CommandBuffer, 1}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.ResourceUsage}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:type, :access, :stages, :usage_flags, :aspect, :samples, :clear_value, :resolve_mode), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Lava.ClearValue, Vulkan.ResolveModeFlag}}})
precompile(Tuple{Type{Lava.AttachmentUsage}, Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Lava.ClearValue, Vulkan.ResolveModeFlag})
precompile(Tuple{typeof(Core.memoryref), Memory{Dictionaries.Dictionary{Lava.ResourceID, Lava.ResourceUsage}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :dims, :samples, :aspect, :access, :usage_flags, :layer_range, :mip_range), Tuple{Vulkan.Format, Array{Int64, 1}, Int64, Vulkan.ImageAspectFlag, Lava.MemoryAccess, Vulkan.ImageUsageFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{Lava.Attachment}, Lava.Device})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :name, :flags), Tuple{Lava.ResourceID, Lava.Attachment, Symbol, Lava.ResourceFlags}}})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceID, Lava.Attachment, Symbol, Lava.ResourceFlags})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.DeviceAddress}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, Type})
precompile(Tuple{typeof(Base.copyto!), Lava.LinearAllocator, Array{UInt8, 1}, Int64})
precompile(Tuple{Type{Lava.DeviceAddress}, Lava.Buffer})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.WriteDescriptorSet}})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.DescriptorID}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkWriteDescriptorSet}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._WriteDescriptorSet, 1}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkWriteDescriptorSet}}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.CompactRecord}})
precompile(Tuple{typeof(Base.get), Lava.HashTable{Lava.PipelineLayout}, UInt64, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.PipelineLayoutCreateFlag}}, Type{Vulkan._PipelineLayoutCreateInfo}, Array{Vulkan.DescriptorSetLayout, 1}, Array{Vulkan._PushConstantRange, 1}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkPipelineLayoutCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.PipelineLayoutCreateFlag, Int64, Ptr{Ptr{Nothing}}, Int64, Ptr{VulkanCore.LibVulkan.VkPushConstantRange}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.PipelineLayout, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.setindex!), Lava.HashTable{Lava.PipelineLayout}, Lava.PipelineLayout, UInt64})
precompile(Tuple{typeof(Core.memoryref), Memory{Tuple{UInt64, Lava.PipelineLayout}}})
precompile(Tuple{typeof(Base.hash), Vulkan.PipelineRenderingCreateInfo, UInt64})
precompile(Tuple{typeof(Base.haskey), LRUCache.LRU{UInt64, Lava.Pipeline}, UInt64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :specialization_info), Tuple{Ptr{Nothing}, Vulkan.PipelineShaderStageCreateFlag, Ptr{Nothing}}}, Type{Vulkan._PipelineShaderStageCreateInfo}, Vulkan.ShaderStageFlag, Vulkan.ShaderModule, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :cull_mode), Tuple{Ptr{Nothing}, UInt32, Vulkan.CullModeFlag}}, Type{Vulkan._PipelineRasterizationStateCreateInfo}, Bool, Bool, Vulkan.PolygonMode, Vulkan.FrontFace, Bool, Vararg{Float32, 4}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._PipelineVertexInputStateCreateInfo}, Array{Vulkan._VertexInputBindingDescription, 1}, Array{Vulkan._VertexInputAttributeDescription, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, UInt32}}, Type{Vulkan._PipelineInputAssemblyStateCreateInfo}, Vulkan.PrimitiveTopology, Bool})
precompile(Tuple{typeof(Vulkan.convert_nonnull), Type, Vulkan.PipelineViewportStateCreateInfo})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PipelineViewportStateCreateInfo}, Vulkan.PipelineViewportStateCreateInfo})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :viewports, :scissors), Tuple{Ptr{Nothing}, UInt32, Array{Vulkan._Viewport, 1}, Array{Vulkan._Rect2D, 1}}}, Type{Vulkan._PipelineViewportStateCreateInfo}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :sample_mask), Tuple{Ptr{Nothing}, UInt32, Ptr{Nothing}}}, Type{Vulkan._PipelineMultisampleStateCreateInfo}, Vulkan.SampleCountFlag, Bool, Float32, Bool, Bool})
precompile(Tuple{typeof(Vulkan.convert_nonnull), Type, Vulkan.PipelineColorBlendStateCreateInfo})
precompile(Tuple{typeof(Base.convert), Type{Vulkan._PipelineColorBlendStateCreateInfo}, Vulkan.PipelineColorBlendStateCreateInfo})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.PipelineColorBlendStateCreateFlag}}, Type{Vulkan._PipelineColorBlendStateCreateInfo}, Bool, Vulkan.LogicOp, Array{Vulkan._PipelineColorBlendAttachmentState, 1}, NTuple{4, Float32}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._GraphicsPipelineCreateInfo}, Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Vulkan._PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, UInt32, Int32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._PipelineRenderingCreateInfo}, UInt32, Array{Vulkan.Format, 1}, Vulkan.Format, Vulkan.Format})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}, VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo}}, Array{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._PipelineShaderStageCreateInfo, 1}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.PipelineCreateFlag, Int64, Ptr{VulkanCore.LibVulkan.VkPipelineShaderStageCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineVertexInputStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineInputAssemblyStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineTessellationStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineViewportStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineRasterizationStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineMultisampleStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineDepthStencilStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineColorBlendStateCreateInfo}, Ptr{VulkanCore.LibVulkan.VkPipelineDynamicStateCreateInfo}, Vulkan.PipelineLayout, Ptr{Nothing}, UInt32, Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}, VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._GraphicsPipelineCreateInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}}, Array{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._GraphicsPipelineCreateInfo, 1}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkGraphicsPipelineCreateInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Tuple{Array{Vulkan.Pipeline, 1}, Vulkan.Result}, Vulkan.VulkanError}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:memory_domain, :usage_flags, :layout), Tuple{Lava.MemoryDomain, Vulkan.BufferUsageFlag, SPIRV.NativeLayout}}, typeof(Base.similar), Lava.Buffer})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{UInt32, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.CommandBuffer}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._CommandBufferSubmitInfo}, Vulkan.CommandBuffer, UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.SubmitFlag}}, Type{Vulkan._SubmitInfo2}, Array{Vulkan._SemaphoreSubmitInfo, 1}, Array{Vulkan._CommandBufferSubmitInfo, 1}, Array{Vulkan._SemaphoreSubmitInfo, 1}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, 1}, VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo}}, Array{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._SemaphoreSubmitInfo, 1}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._CommandBufferSubmitInfo, 1}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkCommandBufferSubmitInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkSubmitInfo2}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.SubmitFlag, Int64, Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}, Int64, Ptr{VulkanCore.LibVulkan.VkCommandBufferSubmitInfo}, Int64, Ptr{VulkanCore.LibVulkan.VkSemaphoreSubmitInfo}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan.Fence, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Ptr{Nothing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan.Fence, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{Union{Lava.BufferResourceState, Lava.ImageResourceState}}})
precompile(Tuple{typeof(Core.memoryref), Memory{Lava.SubresourceState}})
precompile(Tuple{typeof(Core.memoryref), Memory{Union{Dictionaries.Dictionary{Base.UnitRange{Int64}, Lava.SubresourceState}, Lava.SubresourceState}}})
precompile(Tuple{typeof(Lava.match_subresource), Lava.var"#201#203"{Vulkan.DependencyInfo, Lava.RenderNode, Lava.Resource, Lava.AttachmentUsage, Vulkan.ImageLayout, Lava.SyncRequirements, Lava.SubresourceState, Lava.Subresource, Lava.ImageResourceState, Lava.Image}, Lava.SubresourceMap{Vulkan.ImageLayout}, Lava.Subresource})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :src_stage_mask, :src_access_mask, :dst_stage_mask, :dst_access_mask), Tuple{Ptr{Nothing}, Vararg{UInt64, 4}}}, Type{Vulkan._ImageMemoryBarrier2}, Vulkan.ImageLayout, Vulkan.ImageLayout, UInt32, UInt32, Vulkan.Image, Vulkan._ImageSubresourceRange})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :dependency_flags), Tuple{Ptr{Nothing}, Vulkan.DependencyFlag}}, Type{Vulkan._DependencyInfo}, Array{Vulkan._MemoryBarrier2, 1}, Array{Vulkan._BufferMemoryBarrier2, 1}, Array{Vulkan._ImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkBufferMemoryBarrier2}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkImageMemoryBarrier2, 1}, VulkanCore.LibVulkan.VkImageMemoryBarrier2, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkImageMemoryBarrier2}}, Array{VulkanCore.LibVulkan.VkImageMemoryBarrier2, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._BufferMemoryBarrier2, 1}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkBufferMemoryBarrier2}}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._ImageMemoryBarrier2, 1}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkImageMemoryBarrier2, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkImageMemoryBarrier2}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkImageMemoryBarrier2, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkDependencyInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.DependencyFlag, Int64, Ptr{VulkanCore.LibVulkan.VkMemoryBarrier2}, Int64, Ptr{VulkanCore.LibVulkan.VkBufferMemoryBarrier2}, Int64, Ptr{VulkanCore.LibVulkan.VkImageMemoryBarrier2}})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.RenderingAttachmentInfo}})
precompile(Tuple{Type{Vulkan.ClearColorValue}, NTuple{4, Float32}})
precompile(Tuple{Type{Vulkan.ClearValue}, Vulkan.ClearColorValue})
precompile(Tuple{Type{Tuple}, NamedTuple{(:next, :image_view, :image_layout, :resolve_mode, :resolve_image_view, :resolve_image_layout, :load_op, :store_op, :clear_value), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue}}})
precompile(Tuple{Type{Vulkan.RenderingAttachmentInfo}, Ptr{Nothing}, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.ResolveModeFlag, Vulkan.ImageView, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan.ClearValue})
precompile(Tuple{typeof(Base.push!), Array{Vulkan.RenderingAttachmentInfo, 1}, Vulkan.RenderingAttachmentInfo})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan.RenderingInfo}, Vulkan.Rect2D, Int64, Int64, Array{Vulkan.RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Vulkan.ImageView}}, Type{Vulkan._RenderingAttachmentInfo}, Vulkan.ImageLayout, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan._ClearValue})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._RenderingInfo}, Vulkan._Rect2D, UInt32, UInt32, Array{Vulkan._RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}, VulkanCore.LibVulkan.VkRenderingAttachmentInfo, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Vulkan._RenderingAttachmentInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}}, Array{VulkanCore.LibVulkan.VkRenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type, Tuple{Array{Vulkan._RenderingAttachmentInfo, 1}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkRenderingAttachmentInfo, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkRenderingAttachmentInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{VulkanCore.LibVulkan.VkRenderingInfo}, VulkanCore.LibVulkan.VkStructureType, Ptr{Nothing}, Vulkan.RenderingFlag, VulkanCore.LibVulkan.VkRect2D, UInt32, UInt32, Int64, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}, Ptr{VulkanCore.LibVulkan.VkRenderingAttachmentInfo}})
precompile(Tuple{typeof(Base.finalize), Any})
precompile(Tuple{Lava.var"#194#197"{Lava.RenderGraph, Int64}, Lava.BakedRenderGraph})
precompile(Tuple{typeof(Base.collect), Lava.Resource, Lava.Device})
precompile(Tuple{StructEquality.var"##s1#3", Vararg{Any, 5}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StructEquality.var"#4#5", NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.foldr), Function, Base.Generator{NTuple{4, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Base.Generator{NTuple{4, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{NTuple{4, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}, Base.Generator{Base.Generator{NTuple{4, Symbol}, StructEquality.var"#4#5"}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{StructEquality.var"#4#5", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.FlipArgs{StructEquality.var"#combine#6"}, Symbol})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{StructEquality.var"#4#5", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}}, Base._InitialValue, NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:mip_level, :layer), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:usage_flags,), T} where T<:Tuple}, Tuple{Vulkan.BufferUsageFlag}})
precompile(Tuple{Type{NamedTuple{(:is_linear, :layers, :mip_levels, :flags), T} where T<:Tuple}, Tuple{Bool, Int64, Int64, Vulkan.ImageCreateFlag}})
precompile(Tuple{Type{NamedTuple{(:src_stage_mask, :dst_stage_mask, :src_access_mask, :dst_access_mask), T} where T<:Tuple}, Tuple{Vulkan.PipelineStageFlag2, Vulkan.PipelineStageFlag2, Vulkan.AccessFlag2, Vulkan.AccessFlag2}})
precompile(Tuple{Type{NamedTuple{(:own,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:layer_range, :mip_range), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect), Lava.Attachment, Lava.Device})
precompile(Tuple{SPIRV.var"#280#281"{ColorTypes.RGBA{Float16}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Base.collect), Type{ColorTypes.RGBA{Float16}}, Lava.ImageView, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._ImageResolve2}, Vulkan._ImageSubresourceLayers, Vulkan._Offset3D, Vulkan._ImageSubresourceLayers, Vulkan._Offset3D, Vulkan._Extent3D})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next,), Tuple{Ptr{Nothing}}}, Type{Vulkan._ResolveImageInfo2}, Vulkan.Image, Vulkan.ImageLayout, Vulkan.Image, Vulkan.ImageLayout, Array{Vulkan._ImageResolve2, 1}})
precompile(Tuple{Vulkan.var"#4#6"{Vulkan.Image}, Vulkan.Image})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.Image, Vulkan.var"#1426#1427"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#4#6"{Vulkan.ImageView}, Vulkan.ImageView})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.ImageView, Vulkan.var"#1430#1431"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Base.invperm), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isperm), Tuple{Int64, Int64}})
precompile(Tuple{Base.PermutedDimsArrays.var"#1#2"{(2, 1), (2, 1)}, Int64})
precompile(Tuple{Type{NamedTuple{(:checkfile,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.memoryref), Memory{Tuple{Any, Union{Base.PkgId, Module}, Array{T, 1} where T}}})
precompile(Tuple{Type{NamedTuple{(:hasfirst,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:digit_align_width,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.reverse), Tuple{String, String}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#261#262"{Tuple{String, String}}, Base.Val{2}})
precompile(Tuple{Base.var"#261#262"{Tuple{String, String}}, Int64})
precompile(Tuple{Base.BottomRF{typeof(Base.:(+))}, Base._InitialValue, Int64})
precompile(Tuple{typeof(Main.save_test_render), String, Array{ColorTypes.RGBA{Float16}, 2}, UInt64})
precompile(Tuple{FileIO.var"##action#33", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.action), Symbol, Array{Union{Base.PkgId, Module}, 1}, FileIO.Formatted{F} where F<:(FileIO.DataFormat{sym} where sym), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{Float16}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{Float16}, 2}}})
precompile(Tuple{typeof(ImageIO.save), FileIO.File{FileIO.DataFormat{:PNG}, String}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{Float16}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{Float16}, 2}}})
precompile(Tuple{typeof(libpng_jll.__init__)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{LazyModules.LazyFunction, String, Vararg{Any}})
precompile(Tuple{LazyModules.var"##_#1", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, LazyModules.LazyFunction, String, Vararg{Any}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:digits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(PNGFiles.save), String, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{Float16}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{Float16}, 2}}})
precompile(Tuple{FileIO.var"##action#33", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.action), Symbol, Array{Union{Base.PkgId, Module}, 1}, FileIO.Formatted{F} where F<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{typeof(ImageIO.load), FileIO.File{FileIO.DataFormat{:PNG}, String}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(PNGFiles.load), String})
precompile(Tuple{Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, UndefInitializer, UInt32, UInt32})
precompile(Tuple{typeof(ImageIO.enforce_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{ColorTypes.RGBA{Float16}, 2}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{Base.var"##s124#721", Vararg{Any, 6}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.permutedims), Array{ColorTypes.RGBA{Float16}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hash), Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Base.in), UInt64, UInt64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Float64, Vararg{Float64}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.fill), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, Nothing})
precompile(Tuple{Type{GeometryExperiments.NormedPrimitive{inf, T} where T}, Int64})
precompile(Tuple{Base.var"#56#57", Type})
precompile(Tuple{GeometryExperiments.var"##s27#30", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.ntuple), GeometryExperiments.var"#31#32", Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.getproperty), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.getproperty), Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Base.RefValue{Symbol}}}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, NTuple{4, Tuple{Int64, Int64}}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, NTuple{4, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, StaticArrays.var"#166#168"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(GeometryExperiments.radius), GeometryExperiments.NormedPrimitive{inf, Int64}})
precompile(Tuple{Type{GeometryExperiments.UniformScaling{T} where T}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, GeometryExperiments.UniformScaling{Int64}, GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, GeometryExperiments.UniformScaling{Int64}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, GeometryExperiments.UniformScaling{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Tuple{StaticArrays.SOneTo{4}, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Tuple{StaticArrays.SOneTo{4}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, GeometryExperiments.UniformScaling{Int64}}, Tuple{StaticArrays.SOneTo{4}, Int64}})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, ShaderLibrary.Rectangle{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}})
precompile(Tuple{Type{GeometryExperiments.PointSet{Dim, T, V} where V<:AbstractArray{StaticArraysCore.SArray{Tuple{Dim}, T, 1, Dim}, 1} where T where Dim}, GeometryExperiments.Transformed{GeometryExperiments.NormedPrimitive{inf, Int64}, GeometryExperiments.ComposedTransform{GeometryExperiments.Translation{2, Float32}, GeometryExperiments.Scaling{2, Float32}}}, Type})
precompile(Tuple{GeometryExperiments.UniformScaling{Int64}, GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{GeometryExperiments.ComposedTransform{GeometryExperiments.Translation{2, Float32}, GeometryExperiments.Scaling{2, Float32}}, GeometryExperiments.PointSet{2, Float32, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Gradient, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Main.read_texture), String})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}}, UndefInitializer, UInt32, UInt32})
precompile(Tuple{typeof(ImageIO.enforce_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{ColorTypes.RGBA{Float16}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt16, 16}}, 2}})
precompile(Tuple{Type{NamedTuple{(:usage_flags,), T} where T<:Tuple}, Tuple{Vulkan.ImageUsageFlag}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Lava.image_resource), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{ColorTypes.RGBA{Float16}, 2}, SPIRV.NativeLayout})
precompile(Tuple{Type{Vulkan.BufferImageCopy}, Int64, Int64, Int64, Lava.Subresource, Vulkan.Offset3D, Vulkan.Extent3D})
precompile(Tuple{Type{NamedTuple{(:vertex_data,), T} where T<:Tuple}, Tuple{Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:vertex_data,), Tuple{Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}}, Type{GeometryExperiments.VertexMesh{I, VL, VN, VD} where VD where VN where VL where I}, Base.UnitRange{Int64}, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{12, Symbol}})
precompile(Tuple{Type{ShaderLibrary.Sprite}, Lava.Resource})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{Int64, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, GeometryExperiments.FaceOrientation})
precompile(Tuple{typeof(Core.memoryref), Memory{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Sprite, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.Sprite}, Lava.Device})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mutable{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.getindex), Float32, UInt32})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.ArrayType, SPIRV.StorageClass})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{2048}, SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}, 1, 2048}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType, SPIRV.ResultID})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Lava.DescriptorIndex}}, SPIRV.PointerType})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Expression}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Expression, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType, Nothing})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.ImageType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.SampledImageType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.ImageType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.SampledImageType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ImageType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.ImageType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Union{SPIRV.Constant, SPIRV.SPIRType, SPIRV.Variable}}, SPIRV.ResultID, SPIRV.SampledImageType})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.ImageType}})
precompile(Tuple{SPIRV.var"#57#58"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.SampledImageType}})
precompile(Tuple{SPIRV.var"#51#52"{SPIRV.GlobalsInfo}, SPIRV.ArrayType})
precompile(Tuple{SPIRV.var"#55#56", Tuple{SPIRV.ResultID, SPIRV.ArrayType}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.Dim})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.ImageFormat})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.Dim})
precompile(Tuple{typeof(Base.getindex), SPIRV.EnumInfos, SPIRV.ImageFormat})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Int64})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Vulkan.Sampler, Vulkan.VulkanError}})
precompile(Tuple{typeof(Base.setindex!), Array{VulkanCore.LibVulkan.VkDescriptorImageInfo, 1}, VulkanCore.LibVulkan.VkDescriptorImageInfo, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorImageInfo}}, Array{VulkanCore.LibVulkan.VkDescriptorImageInfo, 1}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorBufferInfo}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorImageInfo}}, GenericMemoryRef{:not_atomic, VulkanCore.LibVulkan.VkDescriptorImageInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{VulkanCore.LibVulkan.VkDescriptorBufferInfo}}, GenericMemoryRef{:not_atomic, Any, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Lava.match_subresource), Lava.var"#201#203"{Vulkan.DependencyInfo, Lava.RenderNode, Lava.Resource, Lava.ImageUsage, Vulkan.ImageLayout, Lava.SyncRequirements, Lava.SubresourceState, Lava.Subresource, Lava.ImageResourceState, Lava.Image}, Lava.SubresourceMap{Vulkan.ImageLayout}, Lava.Subresource})
precompile(Tuple{Vulkan.var"#4#6"{Vulkan.Sampler}, Vulkan.Sampler})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.Sampler, Vulkan.var"#1453#1454"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Base.getindex), Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Tuple{Float64, Float64}, Vararg{Tuple{Float64, Float64}}})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, ShaderLibrary.Rectangle{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Main.save_test_render), String, Array{ColorTypes.RGBA{Float16}, 2}, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base.:(==)), UInt64, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base.in), UInt64, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Main.font_file), String})
precompile(Tuple{Type{OpenType.InvalidFontException}, String})
precompile(Tuple{typeof(Base.signbit), Int64})
precompile(Tuple{Type{Base.KeyError}, BinaryParsingTools.Tag{4}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.SimpleGlyphFlag}})
precompile(Tuple{typeof(Core.memoryref), Memory{Union{Int16, UInt8}}})
precompile(Tuple{typeof(Core.memoryref), Memory{Base.UnitRange{UInt64}}})
precompile(Tuple{typeof(Core.memoryref), Memory{Union{Nothing, OpenType.CompositeGlyph, OpenType.SimpleGlyph}}})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Int64}, Int64})
precompile(Tuple{typeof(Base._cshp), Int64, Tuple{Bool}, Tuple{}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rm_singleton_indices), Tuple{Bool}, Base.UnitRange{Int64}})
precompile(Tuple{Base.var"#185#187"{Tuple{Bool}, Tuple{Int64}, Int64}, Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{Array{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1}}})
precompile(Tuple{typeof(Core.memoryref), Memory{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}}})
precompile(Tuple{typeof(Base.:(==)), Int64})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.FeatureRule{OpenType.SubstitutionRuleType}}})
precompile(Tuple{typeof(Core.memoryref), Memory{Base.UnitRange{UInt16}}})
precompile(Tuple{typeof(Core.memoryref), Memory{UInt16}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.RangeClass}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.FeatureRule{OpenType.PositioningRuleType}}})
precompile(Tuple{typeof(Dates.daysinmonth), Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Dates.AMPM, Dates.AMPM})
precompile(Tuple{typeof(Dates.adjusthour), Int64, Dates.AMPM})
precompile(Tuple{typeof(Dates.totaldays), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Vararg{Int64, 4}})
precompile(Tuple{typeof(Dates.UTM), Int64})
precompile(Tuple{Type{Dates.DateTime}, Dates.UTInstant{Dates.Millisecond}})
precompile(Tuple{Type{OpenType.OpenTypeFont}, String})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.CharacterToGlyphIndexMappingTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.CmapSubtable{N} where N}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.CmapSubtable{4}}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.SegmentMappingToDeltaValues}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.SegmentMappingToDeltaValues, 1}, OpenType.SegmentMappingToDeltaValues, Base.Generator{Array{OpenType.EncodingRecord, 1}, OpenType.var"#44#46"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.CmapSubtable{12}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{OpenType.SegmentMappingToDeltaValues, 1}, OpenType.SegmentedCoverage, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.CmapSubtable{N} where N, 1}, Base.Generator{Array{OpenType.EncodingRecord, 1}, OpenType.var"#44#46"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.FontHeader}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.HorizontalHeader}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.MaximumProfile}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), OpenType.var"#256#260"{OpenType.MaximumProfile, OpenType.HorizontalHeader}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), OpenType.var"#257#261"{OpenType.MaximumProfile, OpenType.FontHeader}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{UInt32}})
precompile(Tuple{typeof(Base._array_for), Type{UInt32}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 1}, UInt32, Base.Generator{Base.UnitRange{Int64}, OpenType.var"#55#56"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType}}, Int64})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), OpenType.var"#258#262"{OpenType.TableNavigationMap, OpenType.IndexToLocation, OpenType.MaximumProfile, OpenType.FontHeader}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.VerticalHeader}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), OpenType.var"#259#263"{OpenType.VerticalHeader, OpenType.MaximumProfile}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.GlyphSubstitutionTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.ScriptListTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.ScriptTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LangSysTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.FeatureListTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.FeatureTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LookupListTable}, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, OpenType.var"#90#92"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType, Int64}, Array{UInt16, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt16, 1}, OpenType.var"#90#92"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType, Int64}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupSubtable{1}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.CoverageTable}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.SingleTableFormat2}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.SingleTableFormat2, 1}, OpenType.SingleTableFormat2, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.SingleTableFormat2, 1}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GSUBLookupTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GSUBLookupTable, 1}, OpenType.GSUBLookupTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#90#92"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType, Int64}}, Int64})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupSubtable{3}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.AlternateSetTable}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GSUBLookupAlternateTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GSUBLookupAlternateTable, 1}, OpenType.GSUBLookupAlternateTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GSUBLookupAlternateTable, 1}})
precompile(Tuple{typeof(Core.Compiler._typename), Union})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupSubtable{6}}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTable, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat1, 1}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GSUBChainedContextualTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GSUBChainedContextualTable, 1}, OpenType.GSUBChainedContextualTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTable, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTable, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTable, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTable, 1}})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GSUBChainedContextualTable, 1}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupSubtable{2}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.SequenceTable}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GSUBLookupMultipleTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GSUBLookupMultipleTable, 1}, OpenType.GSUBLookupMultipleTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GSUBLookupMultipleTable, 1}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GSUBLookupSubtable{4}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LigatureSetTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LigatureTable}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GSUBLookupLigatureTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GSUBLookupLigatureTable, 1}, OpenType.GSUBLookupLigatureTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GSUBLookupLigatureTable, 1}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.SingleTableFormat1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.SingleTableFormat1, 1}, OpenType.SingleTableFormat1, Base.Generator{Array{UInt16, 1}, OpenType.var"#240#242"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GSUBLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.SingleTableFormat1, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat1, 1}})
precompile(Tuple{Type{OpenType.LookupListTable}, UInt16, Array{UInt16, 1}, Array{OpenType.GSUBLookupTable, 1}})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.GlyphPositioningTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GPOSLookupTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GPOSLookupSubtable{4}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.MarkArrayTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.AnchorTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.BaseArrayTable}, UInt16})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.AnchorTableFormat1, 1}, OpenType.AnchorTableFormat1, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.AnchorTableFormat1, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, OpenType.AnchorTableFormat1}, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.BaseRecord}, Array{UInt16, 1}, Array{Union{Nothing, OpenType.AnchorTableFormat1}, 1}})
precompile(Tuple{Type{OpenType.BaseRecord}, Array{UInt16, 1}, Array{OpenType.AnchorTableFormat1, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GPOSLookupMarkToBaseAttachmentTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GPOSLookupMarkToBaseAttachmentTable, 1}, OpenType.GPOSLookupMarkToBaseAttachmentTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#212#214"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GPOSLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GPOSLookupMarkToBaseAttachmentTable, 1}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GPOSLookupTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GPOSLookupTable, 1}, OpenType.GPOSLookupTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#90#92"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType, Int64}}, Int64})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GPOSLookupSubtable{6}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.Mark2ArrayTable}, UInt16})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.AnchorTableFormat1, 1}, OpenType.AnchorTableFormat1, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.AnchorTableFormat1, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.Mark2Record}, Array{UInt16, 1}, Array{OpenType.AnchorTableFormat1, 1}})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.GPOSLookupMarkToMarkAttachmentTable}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.GPOSLookupMarkToMarkAttachmentTable, 1}, OpenType.GPOSLookupMarkToMarkAttachmentTable, Base.Generator{Array{UInt16, 1}, OpenType.var"#212#214"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{Type{OpenType.GPOSLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GPOSLookupMarkToMarkAttachmentTable, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.Mark2Record}, Array{UInt16, 1}, Array{Nothing, 1}})
precompile(Tuple{Type{OpenType.LookupListTable}, UInt16, Array{UInt16, 1}, Array{OpenType.GPOSLookupTable, 1}})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.GlyphDefinitionTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{UInt16}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.ClassDefinitionTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LigatureCaretListTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.LigatureGlyphTable}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.CaretValueTable}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.CaretValueTableFormat1, 1}, OpenType.CaretValueTableFormat1, Base.Generator{Array{UInt16, 1}, OpenType.var"#162#164"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{Type{OpenType.LigatureGlyphTable}, UInt16, Array{UInt16, 1}, Array{OpenType.CaretValueTableFormat1, 1}})
precompile(Tuple{Base.ComposedFunction{Base.Fix{2, typeof(Base.:(==)), Int64}, OpenType.var"#format#359"}, OpenType.SegmentMappingToDeltaValues})
precompile(Tuple{Base.ComposedFunction{Base.Fix{2, typeof(Base.:(==)), Int64}, OpenType.var"#format#359"}, OpenType.SegmentedCoverage})
precompile(Tuple{typeof(OpenType.anchor_point), OpenType.AnchorTableFormat1})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}})
precompile(Tuple{typeof(Base.setindex!), Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, 1}, Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Base.Generator{Array{OpenType.BaseRecord, 1}, OpenType.var"#325#327"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, 1}, Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{OpenType.BaseRecord, 1}, OpenType.var"#325#327"}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(OpenType.anchor_point), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, OpenType.AnchorTable}, 1}, Tuple{Bool}, Tuple{Int64}}}}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, OpenType.AnchorTableFormat1})
precompile(Tuple{Type{OpenType.MarkToBaseRule}, OpenType.Coverage, OpenType.Coverage, Array{Array{T, 1} where T, 1}, Array{OpenType.MarkAnchor, 1}})
precompile(Tuple{typeof(Base.setindex!), Memory{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}}, Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Memory{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}}, Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Base.Generator{Array{OpenType.BaseRecord, 1}, OpenType.var"#325#327"}, Int64})
precompile(Tuple{Type{OpenType.MarkToBaseRule}, OpenType.Coverage, OpenType.Coverage, Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{OpenType.MarkAnchor, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, Base.Generator{Array{OpenType.Mark2Record, 1}, OpenType.var"#335#337"}, Int64})
precompile(Tuple{Type{OpenType.MarkToMarkRule}, OpenType.Coverage, OpenType.Coverage, Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{OpenType.MarkAnchor, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{OpenType.Mark2Record, 1}, OpenType.var"#335#337"}, Int64, Int64})
precompile(Tuple{Type{OpenType.MarkToMarkRule}, OpenType.Coverage, OpenType.Coverage, Array{Array{T, 1} where T, 1}, Array{OpenType.MarkAnchor, 1}})
precompile(Tuple{typeof(Base.setindex!), Memory{Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}}, Array{Nothing, 1}, Int64})
precompile(Tuple{Type{OpenType.GlyphDefinition}, OpenType.GDEFHeader_1_0})
precompile(Tuple{Type{OpenType.OpenTypeFont}, Dates.DateTime, Dates.DateTime, Bool, UInt16, Int64, Array{Union{Nothing, OpenType.CompositeGlyph, OpenType.SimpleGlyph}, 1}, OpenType.GlyphSubstitution, OpenType.GlyphPositioning, OpenType.GlyphDefinition, OpenType.CharacterToGlyphIndexMappingTable, OpenType.HorizontalMetrics, OpenType.VerticalMetrics})
precompile(Tuple{typeof(Base.getindex), OpenType.OpenTypeFont, Char})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, Int64, Vararg{Any}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{GeometryExperiments.Box{Dim, T} where T where Dim}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}})
precompile(Tuple{typeof(Core.memoryref), Memory{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1, 3}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{GeometryExperiments.var"#49#50"}, Symbol})
precompile(Tuple{Type{NamedTuple{(:compact,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(OpenType.curves_normalized), OpenType.SimpleGlyph})
precompile(Tuple{typeof(Base.map), Function, Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1, 3}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#3#5", Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1, 3}, 1}, Base.Generator{Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1, 3}, 1}, Main.var"#3#5"}})
precompile(Tuple{Type{ShaderLibrary.QuadraticBezierFill}, Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, 1}})
precompile(Tuple{Type{ShaderLibrary.QuadraticBezierPrimitiveData}, Base.OneTo{Int64}, Float64, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, ShaderLibrary.QuadraticBezierPrimitiveData})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, ShaderLibrary.Rectangle{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.QuadraticBezierPrimitiveData}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.QuadraticBezierFill, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.QuadraticBezierFill}, Lava.Device})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mutable{StaticArraysCore.SArray{Tuple{2}, UInt32, 1, 2}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{UInt32, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{UInt32, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.:(+)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:atol,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.abs), Float32})
precompile(Tuple{typeof(Base.:(+)), Int64, Float32})
precompile(Tuple{typeof(Base.:(/)), Int64, Float32})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.GMP.MPZ.add!)}, Symbol})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{72, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{72, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{72, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{72, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Base.UnitRange{UInt32}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.FloatType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.QuadraticBezierPrimitiveData}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{ShaderLibrary.QuadraticBezierPrimitiveData, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{ShaderLibrary.QuadraticBezierPrimitiveData, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.QuadraticBezierPrimitiveData}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}}}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ArrayType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{UInt16}, SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), UInt16})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, UInt16})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, UInt16})
precompile(Tuple{typeof(Base.hash), UInt16, UInt64})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.SSAValue}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.SSAValue, Float32}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Float64, Core.SSAValue}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Float64})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float64})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float64})
precompile(Tuple{typeof(Base.hash), Float64, UInt64})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.BooleanType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.BooleanType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.SSAValue, Float32, Float32}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, Core.SSAValue, Vararg{SPIRV.ResultID, 5}}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{68, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{68, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{68, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{68, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.filter), SPIRV.var"#445#450"{Array{Int64, 1}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{61, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{61, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{61, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{61, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{38, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{38, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{38, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{38, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{31, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(SPIRV.branching_blocks), SPIRV.var"#520#523"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, SPIRV.FunctionDefinition, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{typeof(Core.memoryref), Memory{SPIRV.Block}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{SPIRV.Expression, SPIRV.Expression}, Any, Any})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{71, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{71, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{71, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{71, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{64, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{64, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{64, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{64, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{41, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{41, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{41, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{41, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{75, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{75, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{75, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{75, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{42, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{42, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{42, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{42, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{77, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{77, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{77, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{77, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{70, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{70, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{70, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{70, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{43, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{43, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{43, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{43, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{36, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{36, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{36, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{36, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.push!), Base.Set{SPIRV.ResultID}, SPIRV.ResultID})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt16}, UInt16})
precompile(Tuple{Type{UInt32}, UInt16})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.LoopControl})
precompile(Tuple{Type{UInt32}, SPIRV.LoopControl})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#23#24", Array{SPIRV.LoopControl, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.LoopControl, 1}, SPIRV.var"#23#24"}})
precompile(Tuple{typeof(SPIRV.element_stride), SPIRV.VulkanLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.element_stride), SPIRV.VulkanLayout, SPIRV.ArrayType})
precompile(Tuple{typeof(Core.memoryref), Memory{Pair{String, Base.PkgId}}})
precompile(Tuple{typeof(SPIRV.serialize_array!), Array{UInt8, 1}, Array{ShaderLibrary.QuadraticBezierPrimitiveData, 1}, SPIRV.VulkanLayout, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.QuadraticBezierPrimitiveData, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Base.UnitRange{UInt32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Int64})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:usage_flags, :name), T} where T<:Tuple}, Tuple{Vulkan.ImageUsageFlag, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags, :name), Tuple{Vulkan.ImageUsageFlag, Symbol}}, typeof(Lava.image_resource), Lava.Device, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{ShaderLibrary.GaussianBlurDirectional}, Lava.Resource, UInt32, Float64})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.GaussianBlurDirectional, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.GaussianBlurDirectional}, Lava.Device})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{15, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{UInt32}}, Base.Iterators.Rest{Tuple{DataType, DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#19#20"{SPIRV.TypeMap}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Base.Generator{Tuple{DataType, DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.ScalarType, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, Float32, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{UInt32, Float32, Lava.DescriptorIndex}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.SSAValue, Core.SSAValue}})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, GlobalRef, Type, SPIRV.Block})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), Int32})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Int32})
precompile(Tuple{SPIRV.var"##emit_constant!#308", Bool, typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Int32})
precompile(Tuple{typeof(Base.hash), Int32, UInt64})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), QuoteNode})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.ResultID}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#313#317"{Bool, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, SPIRV.ModuleTarget, SPIRV.Translation}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StructEquality.var"#4#5", Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.foldr), Function, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#4#5"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}, Base.Generator{Base.Generator{Tuple{Symbol, Symbol, Symbol}, StructEquality.var"#4#5"}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{StructEquality.var"#4#5", Base.BottomRF{Base.FlipArgs{StructEquality.var"#combine#6"}}}, Base._InitialValue, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.isequal), SPIRV.Constant, SPIRV.Constant})
precompile(Tuple{Type{Tuple}, NamedTuple{(:op, :type, :result, :args), Tuple{SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Array{Any, 1}}}})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.ImageType})
precompile(Tuple{typeof(Base.vect), Int32})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{Type{ShaderLibrary.GaussianBlur}, Lava.Resource, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ShaderLibrary.var"#48#49", GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, ShaderLibrary.var"#48#49"}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, ShaderLibrary.var"#48#49"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, Tuple{StaticArrays.SOneTo{4}, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, Tuple{StaticArrays.SOneTo{4}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{GeometryExperiments.PointSet{2, Float32, StaticArraysCore.SArray{Tuple{4}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 4}}, ShaderLibrary.var"#48#49"}, Tuple{StaticArrays.SOneTo{4}, Int64}})
precompile(Tuple{Type{Accessors.IndexLens{I} where I<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:color}, Vararg{Any}})
precompile(Tuple{typeof(CompositionsBase.opcompose), Accessors.PropertyLens{:color}, Vararg{Any}})
precompile(Tuple{typeof(Base.reverse), Tuple{Accessors.PropertyLens{:color}, Accessors.IndexLens{Tuple{Int64}}}})
precompile(Tuple{typeof(Base.:(∘)), Accessors.IndexLens{Tuple{Int64}}, Accessors.PropertyLens{:color}})
precompile(Tuple{typeof(Base.getproperty), Accessors.IndexLens{Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(GeometryExperiments.sdf), GeometryExperiments.Box{2, Float32}})
precompile(Tuple{typeof(Base.getproperty), GeometryExperiments.Transformed{GeometryExperiments.NormedPrimitive{inf, Int64}, GeometryExperiments.ComposedTransform{GeometryExperiments.Translation{2, Float32}, GeometryExperiments.Scaling{2, Float32}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:transform, :data), T} where T<:Tuple}, Tuple{GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}, Nothing}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.GaussianBlur, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims, :usage_flags), Tuple{Array{Int64, 1}, Vulkan.ImageUsageFlag}}, typeof(Base.similar), Lava.Attachment})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name,), Tuple{Symbol}}, Type{Lava.Resource}, Lava.Attachment})
precompile(Tuple{Type{Tuple}, NamedTuple{(:color, :color_clear, :depth, :depth_clear, :stencil, :stencil_clear, :render_state, :invocation_state, :camera), Tuple{Array{Lava.Resource, 1}, Array{Union{Nothing, Lava.ClearValue}, 1}, Nothing, Nothing, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera}}})
precompile(Tuple{Type{ShaderLibrary.ShaderParameters}, Array{Lava.Resource, 1}, Array{Union{Nothing, Lava.ClearValue}, 1}, Nothing, Nothing, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands, :name), Tuple{Vulkan.PipelineStageFlag2, Lava.RenderArea, Array{Lava.Command, 1}, Symbol}}, Type{Lava.RenderNode}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands, :name), Tuple{Vulkan.PipelineStageFlag2, Nothing, Array{Lava.Command, 1}, Symbol}}, Type{Lava.RenderNode}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:type, :access, :stages, :usage_flags, :aspect, :samples, :clear_value, :resolve_mode), Tuple{Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing, Vulkan.ResolveModeFlag}}})
precompile(Tuple{Type{Lava.AttachmentUsage}, Lava.ResourceUsageType, Lava.MemoryAccess, Vulkan.PipelineStageFlag2, Vulkan.ImageUsageFlag, Vulkan.ImageAspectFlag, Int64, Nothing, Vulkan.ResolveModeFlag})
precompile(Tuple{typeof(Core.memoryref), Memory{BinaryParsingTools.Tag{4}}})
precompile(Tuple{Type{OpenType.ShapingOptions}, BinaryParsingTools.Tag{4}, BinaryParsingTools.Tag{4}})
precompile(Tuple{Type{OpenType.FontOptions}, OpenType.ShapingOptions, Float64})
precompile(Tuple{Type{OpenType.TextLimits}, Float64, Float64, OpenType.TextLimitsSpec})
precompile(Tuple{OpenType.var"##TextOptions#373", Int64, OpenType.TextLimits, BinaryParsingTools.Tag{4}, Type{OpenType.TextOptions}})
precompile(Tuple{OpenType.var"##CharacterStyle#370", Symbol, Symbol, Bool, Bool, Nothing, Nothing, Nothing, Type{OpenType.CharacterStyle}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, OpenType.CharacterStyle})
precompile(Tuple{Type{OpenType.Text}, String, OpenType.TextOptions})
precompile(Tuple{Type{Pair{A, B} where B where A}, OpenType.OpenTypeFont, OpenType.FontOptions})
precompile(Tuple{typeof(Base.vect), Pair{OpenType.OpenTypeFont, OpenType.FontOptions}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.Line}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.SplitLine}})
precompile(Tuple{typeof(Core.memoryref), Memory{Array{Array{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.LineSegment}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.TextRun}})
precompile(Tuple{typeof(Core.memoryref), Memory{OpenType.Feature}})
precompile(Tuple{typeof(Base.tail), Tuple{OpenType.Direction, OpenType.Direction}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, Tuple{Int16, Int16}})
precompile(Tuple{Type{OpenType.GlyphOffset}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any})
precompile(Tuple{typeof(Base.tail), NTuple{4, OpenType.PositioningRuleType}})
precompile(Tuple{typeof(Base.tail), Tuple{OpenType.PositioningRuleType, OpenType.PositioningRuleType, OpenType.PositioningRuleType}})
precompile(Tuple{typeof(Base.tail), Tuple{OpenType.PositioningRuleType, OpenType.PositioningRuleType}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{StaticArrays.SOneTo{3}}})
precompile(Tuple{typeof(Base.getproperty), Base.LinearIndices{1, Tuple{StaticArrays.SOneTo{3}}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.LinearIndices{1, Tuple{StaticArrays.SOneTo{3}}}, Int64})
precompile(Tuple{typeof(OpenType.lines), OpenType.Text, Array{Pair{OpenType.OpenTypeFont, OpenType.FontOptions}, 1}})
precompile(Tuple{typeof(OpenType.apply_substitution_rules!), Array{UInt16, 1}, OpenType.GlyphSubstitution, OpenType.GlyphDefinition, Array{OpenType.Feature, 1}, Function, Nothing})
precompile(Tuple{typeof(OpenType.apply_substitution_rule!), Array{UInt16, 1}, OpenType.FeatureRule{OpenType.SubstitutionRuleType}, OpenType.GlyphSubstitution, OpenType.GlyphDefinition, Int64, OpenType.var"#365#368", OpenType.Feature, Nothing})
precompile(Tuple{typeof(Base.Iterators.only), Array{OpenType.Line, 1}})
precompile(Tuple{typeof(Base.getproperty), OpenType.Line, Symbol})
precompile(Tuple{typeof(Base.Iterators.only), Array{OpenType.LineSegment, 1}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}}})
precompile(Tuple{typeof(Core.memoryref), Memory{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}}})
precompile(Tuple{Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Float32, Float32, Float32})
precompile(Tuple{typeof(Base.something), Nothing, ColorTypes.RGB{Float32}})
precompile(Tuple{typeof(Base.convert), Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.ExtremaMap{F} where F}, GeometryExperiments.var"#28#29"{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{GeometryExperiments.var"#26#27"}, Symbol})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(4,)}, StaticArraysCore.Size{(4,)}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Int64, Vararg{Any}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{GeometryExperiments.Box{Dim, T} where T where Dim}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}})
precompile(Tuple{typeof(ShaderLibrary.glyph_quads), OpenType.Line, OpenType.LineSegment, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:quads, :curves), Tuple{Array{ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, 1}, Array{StaticArraysCore.SArray{Tuple{3}, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1, 3}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, 1}})
precompile(Tuple{typeof(Base.getproperty), OpenType.Text, Symbol})
precompile(Tuple{typeof(Base.count), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Int64, Array{Char, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#367#368"{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.Unicode.isspace)}}, Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#367#368"{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.Unicode.isspace)}}, typeof(Base.add_sum), Int64, Array{Char, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#4#6", Array{ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, 1}})
precompile(Tuple{typeof(Core.memoryref), Memory{Base.UnitRange{UInt32}}})
precompile(Tuple{typeof(Base.unique), Base.Generator{Array{ShaderLibrary.Primitive{ShaderLibrary.QuadraticBezierPrimitiveData, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}, 1}, Main.var"#4#6"}})
precompile(Tuple{typeof(Base.length), Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Array{StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, 1}, 1}, 1}})
precompile(Tuple{Type{ShaderLibrary.Text}, OpenType.Text, OpenType.OpenTypeFont, OpenType.FontOptions})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Text, ShaderLibrary.ShaderParameters, Tuple{Int64, Int64}})
precompile(Tuple{Type{OpenType.CharacterToGlyphIndexMappingTable}, UInt16, UInt16, Array{OpenType.EncodingRecord, 1}, Array{OpenType.SegmentMappingToDeltaValues, 1}})
precompile(Tuple{typeof(Base._array_for), Type{UInt16}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt16, 1}, UInt16, Base.Generator{Base.UnitRange{Int64}, OpenType.var"#55#56"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, DataType}}, Int64})
precompile(Tuple{Type{OpenType.ComponentGlyphTable}, OpenType.ComponentGlyphFlag, UInt16, Int8, Int8, Nothing, Nothing, Nothing})
precompile(Tuple{Type{OpenType.ComponentGlyphTable}, OpenType.ComponentGlyphFlag, UInt16, Int16, Int16, Nothing, Nothing, Nothing})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.AxisVariationsTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{OpenType.var"##read_table#6", UInt32, Int64, typeof(OpenType.read_table), Base.Fix{2, typeof(Base.read), Type{OpenType.FontVariationsTable}}, SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, OpenType.TableRecord})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTable, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTable, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTableFormat1, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTable, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat2, 1}, Array{OpenType.CoverageTableFormat1, 1}})
precompile(Tuple{Type{OpenType.ChainedSequenceContextFormat3}, UInt16, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.SequenceLookupRecord, 1}, Array{OpenType.CoverageTable, 1}, Array{OpenType.CoverageTableFormat1, 1}, Array{OpenType.CoverageTableFormat2, 1}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.GPOSLookupSubtable{2}}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.PairSetTable}, OpenType.ValueFormat, OpenType.ValueFormat})
precompile(Tuple{typeof(Base._array_for), Type{OpenType.PairAdjustmentTableFormat1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.PairAdjustmentTableFormat1, 1}, OpenType.PairAdjustmentTableFormat1, Base.Generator{Array{UInt16, 1}, OpenType.var"#212#214"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{OpenType.PairAdjustmentTableFormat1, 1}, OpenType.PairAdjustmentTableFormat2, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.GPOSLookupPairAdjustmentTable, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#212#214"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, UInt16, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.GPOSLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, Nothing, Array{OpenType.GPOSLookupPairAdjustmentTable, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.AnchorTableFormat3, 1}, OpenType.AnchorTableFormat3, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.AnchorTableFormat3, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.BaseRecord}, Array{UInt16, 1}, Array{OpenType.AnchorTableFormat3, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, OpenType.AnchorTableFormat3}, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#190#192"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.BaseRecord}, Array{UInt16, 1}, Array{Union{Nothing, OpenType.AnchorTableFormat3}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OpenType.AnchorTableFormat3, 1}, OpenType.AnchorTableFormat3, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{OpenType.AnchorTableFormat3, 1}, Base.Generator{Array{UInt16, 1}, OpenType.var"#206#208"{SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{OpenType.Mark2Record}, Array{UInt16, 1}, Array{OpenType.AnchorTableFormat3, 1}})
precompile(Tuple{Type{OpenType.GPOSLookupTable}, UInt16, OpenType.LookupFlag, UInt16, Array{UInt16, 1}, UInt16, Array{OpenType.GPOSLookupMarkToMarkAttachmentTable, 1}})
precompile(Tuple{typeof(Base.read), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Memory{UInt8}}}, Type{OpenType.MarkGlyphSetsTable}})
precompile(Tuple{typeof(OpenType.anchor_point), OpenType.AnchorTableFormat3})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}, 1}, 1}, Array{Union{Nothing, StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, 1}, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Int16, 1, 2}}, OpenType.AnchorTableFormat3})
precompile(Tuple{Type{OpenType.GlyphDefinition}, OpenType.GDEFHeader_1_3})
precompile(Tuple{Type{OpenType.OpenTypeFont}, Dates.DateTime, Dates.DateTime, Bool, UInt16, Int64, Array{Union{Nothing, OpenType.CompositeGlyph, OpenType.SimpleGlyph}, 1}, OpenType.GlyphSubstitution, OpenType.GlyphPositioning, OpenType.GlyphDefinition, OpenType.CharacterToGlyphIndexMappingTable, OpenType.HorizontalMetrics, Nothing})
precompile(Tuple{typeof(Base.vect), BinaryParsingTools.Tag{4}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{BinaryParsingTools.Tag{4}, 1}})
precompile(Tuple{Type{NamedTuple{(:enabled_features,), T} where T<:Tuple}, Tuple{Base.Set{BinaryParsingTools.Tag{4}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:enabled_features,), Tuple{Base.Set{BinaryParsingTools.Tag{4}}}}, Type{OpenType.ShapingOptions}, BinaryParsingTools.Tag{4}, BinaryParsingTools.Tag{4}})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.Material, Symbol})
precompile(Tuple{typeof(StructTypes.applyfield!), JSON3.MutableClosure{Base.CodeUnits{UInt8, String}, NamedTuple{(), Tuple{}}}, GLTF.PBRMetallicRoughness, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}, Vararg{Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.getproperty), GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}, Symbol})
precompile(Tuple{Type{NamedTuple{(:vertex_normals, :vertex_data), T} where T<:Tuple}, Tuple{Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:vertex_normals, :vertex_data), Tuple{Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}}, Type{GeometryExperiments.VertexMesh{I, VL, VN, VD} where VD where VN where VL where I}, GeometryExperiments.MeshEncoding{UInt16}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, GeometryExperiments.FaceOrientation})
precompile(Tuple{Type{NamedTuple{(:camera,), T} where T<:Tuple}, Tuple{ShaderLibrary.Camera}})
precompile(Tuple{typeof(ConstructionBase.setproperties), ShaderLibrary.ShaderParameters, NamedTuple{(:camera,), Tuple{ShaderLibrary.Camera}}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Gradient, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:focal_length}}}, Int64})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.Camera, Accessors.PropertyLens{:focal_length}, Int64})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:near_clipping_plane}}}, Int64})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.Camera, Accessors.PropertyLens{:near_clipping_plane}, Int64})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:far_clipping_plane}}}, Int64})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.Camera, Accessors.PropertyLens{:far_clipping_plane}, Int64})
precompile(Tuple{Base.var"#261#262"{Tuple{Accessors.PropertyLens{:extent}}}, Int64})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.Camera, Accessors.PropertyLens{:extent}, Tuple{Float32, Float32}})
precompile(Tuple{typeof(MacroTools.match), Symbol, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(ShaderLibrary.screen_box), Lava.Resource})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#7#8", NTuple{6, String}})
precompile(Tuple{typeof(Base.collect), Base.Generator{NTuple{6, String}, Main.var"#7#8"}})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, UndefInitializer, UInt32, UInt32})
precompile(Tuple{typeof(ImageIO.enforce_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{ColorTypes.RGBA{Float16}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base._array_for), Type{Array{ColorTypes.RGBA{Float16}, 2}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}, Array{ColorTypes.RGBA{Float16}, 2}, Base.Generator{NTuple{6, String}, Main.var"#7#8"}, Int64})
precompile(Tuple{Type{NamedTuple{(:format, :name, :layers), T} where T<:Tuple}, Tuple{DataType, Symbol, Int64}})
precompile(Tuple{typeof(Core.memoryref), Memory{DataType}})
precompile(Tuple{typeof(ShaderLibrary.create_cubemap), Lava.Device, Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{ColorTypes.RGBA{Float16}}}, Base.Iterators.Rest{Array{DataType, 1}, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Core.memoryref), Memory{Vulkan.BufferImageCopy}})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NativeLayout, Type{Array{ColorTypes.RGBA{Float16}, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.stride), SPIRV.NativeLayout, Type{Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:aspect, :layer_range, :mip_range), Tuple{Vulkan.ImageAspectFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Lava.Subresource}, Vulkan.ImageAspectFlag, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:address_modes,), T} where T<:Tuple}, Tuple{Tuple{Vulkan.SamplerAddressMode, Vulkan.SamplerAddressMode, Vulkan.SamplerAddressMode}}})
precompile(Tuple{typeof(ShaderLibrary.environment_from_cubemap), Lava.Resource})
precompile(Tuple{typeof(Base.fieldnames), UnionAll})
precompile(Tuple{typeof(Base.Iterators.zip), StaticArraysCore.SArray{Tuple{6}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, 1, 6}, NTuple{6, Symbol}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{StaticArraysCore.SArray{Tuple{6}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, 1, 6}, NTuple{6, Symbol}, Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{StaticArraysCore.SArray{Tuple{6}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, 1, 6}, NTuple{6, Symbol}, Array{UInt64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, Symbol, UInt64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, Symbol, UInt64}, Int64, Int64})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, GeometryExperiments.Box{2, Float32}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, Nothing})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, ShaderLibrary.Rectangle{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Environment{Vulkan.Format(0x00000061), :cubemap}, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Vulkan.Format, Vulkan.Format})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.Environment{Vulkan.Format(0x00000061), :cubemap}}, Lava.Device})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.issubset), Tuple{Symbol}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.Iterators.enumerate), NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Enumerate{NTuple{4, Symbol}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ConstructionBaseStaticArraysExt.var"#2#3"{Tuple{Symbol}}, Base.Iterators.Enumerate{NTuple{4, Symbol}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{NTuple{4, Symbol}}, ConstructionBaseStaticArraysExt.var"#2#3"{Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:z,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mutable{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}}, SPIRV.PointerType})
precompile(Tuple{Type{Bool}, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000003), 0, true, false, 1, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}, SPIRV.ImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000003), 0, true, false, 1, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{2048}, SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000003), 0, true, false, 1, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}, 1, 2048}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{StaticArraysCore.SArray{Tuple{6}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, 1, 6}, NTuple{6, Symbol}, Array{UInt64, 1}}}, Tuple{Tuple{StaticArrays.SOneTo{6}, Int64}, Int64, Int64}})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, Lava.Resource})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:mesh}, Vararg{Any}})
precompile(Tuple{typeof(CompositionsBase.opcompose), Accessors.PropertyLens{:mesh}, Vararg{Any}})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), GeometryExperiments.VertexMesh{UInt32, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(ShaderLibrary.cubemap_to_world), Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(ShaderLibrary.cubemap_to_world), Tuple{Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}}})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, Base.ComposedFunction{Accessors.PropertyLens{:vertex_data}, Accessors.PropertyLens{:mesh}}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:mesh, :orientation, :transform, :data), Tuple{GeometryExperiments.VertexMesh{UInt32, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, GeometryExperiments.FaceOrientation, GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}, Nothing}}})
precompile(Tuple{Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{UInt32, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, GeometryExperiments.FaceOrientation, GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}, Nothing})
precompile(Tuple{typeof(Main.asset), String})
precompile(Tuple{typeof(Main.read_jpeg), String})
precompile(Tuple{typeof(JpegTurbo_jll.__init__)})
precompile(Tuple{typeof(JpegTurbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.:(//)), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Rational{Int64}, Symbol})
precompile(Tuple{typeof(JpegTurbo.fileio_load), FileIO.File{FileIO.DataFormat{:JPEG}, String}})
precompile(Tuple{Base.var"##open#469", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), JpegTurbo.var"#26#27"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, String, Vararg{String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JpegTurbo.LibJpeg.J_COLOR_SPACE}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, JpegTurbo.LibJpeg.J_COLOR_SPACE}, Int64, Int64})
precompile(Tuple{typeof(JpegTurbo.jpeg_decode), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(ShaderLibrary.environment_from_equirectangular), Lava.Resource})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float32, Base.Val{-26}})
precompile(Tuple{typeof(ShaderLibrary.spherical_uv_mapping), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Int64, Float64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.reinterpret), Type{Unsigned}, Float32})
precompile(Tuple{typeof(Base.prevfloat), Float32})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Int64, Vararg{Any}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Int64, Float32, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Int64, Float32, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Float64, Vararg{Any}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}, Tuple{Float64, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Float64, Vararg{Any}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Float64, Int64, Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}, Tuple{Float64, Int64, Int64}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Environment{Vulkan.Format(0x00000061), :equirectangular}, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.Environment{Vulkan.Format(0x00000061), :equirectangular}}, Lava.Device})
precompile(Tuple{SPIRV.var"##s539#227", Vararg{Any, 4}})
precompile(Tuple{typeof(SPIRV.eachindex_uint32), Type})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#228#238", Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#228#238"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#228#238"}, UInt32})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt64}, UInt32})
precompile(Tuple{typeof(Base.isodd), Int64})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Math.two_mul), Float64, Float64})
precompile(Tuple{typeof(Base.muladd), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.rem), UInt64, Type{Int32}})
precompile(Tuple{typeof(Base.:(>>)), Int32, Int64})
precompile(Tuple{typeof(Base.Math.table_unpack), Int32})
precompile(Tuple{typeof(Base.Math.expm1b_kernel), Base.Val{:ℯ}, Float64})
precompile(Tuple{typeof(Base.canonicalize2), Float64, Float64})
precompile(Tuple{typeof(Base.fma), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.reinterpret), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.copysign), Float64, Float64})
precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.Argument}})
precompile(Tuple{typeof(SPIRV.defines_extra_operands), SPIRV.ImageOperands})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#23#24", Array{SPIRV.ImageOperands, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.ImageOperands, 1}, SPIRV.var"#23#24"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.ImageOperands, 1}, SPIRV.var"#23#24"}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{SPIRV.OperandInfo, 1}, Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ImageOperands})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Main.save_test_render), String, Array{ColorTypes.RGBA{Float16}, 2}, UInt64})
precompile(Tuple{typeof(ShaderLibrary.screen_box), Float64})
precompile(Tuple{typeof(Base.getindex), StaticArraysCore.SArray{Tuple{6}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, 1, 6}, Int64})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, GeometryExperiments.Box{2, Float64}, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{GeometryExperiments.Box{2, Float32}}, GeometryExperiments.Box{2, Float64}})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.Rectangle{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:layer_range,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(ShaderLibrary.create_cubemap_from_equirectangular), Lava.Device, Lava.Resource})
precompile(Tuple{Type{Memory{Lava.SubresourceState}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{Vulkan.AccessFlag2, Vulkan.PipelineStageFlag2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :image_view, :resolve_mode, :resolve_image_view), Tuple{Ptr{Nothing}, Vulkan.ImageView, Vulkan.ResolveModeFlag, Ptr{Nothing}}}, Type{Vulkan._RenderingAttachmentInfo}, Vulkan.ImageLayout, Vulkan.ImageLayout, Vulkan.AttachmentLoadOp, Vulkan.AttachmentStoreOp, Vulkan._ClearValue})
precompile(Tuple{Type{NamedTuple{(:layer,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(ShaderLibrary.collect_cubemap_faces), Lava.Resource, Lava.Device})
precompile(Tuple{Type{Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:layer,), Tuple{Int64}}, typeof(Base.collect), Type{ColorTypes.RGBA{Float16}}, Lava.Image, Lava.Device})
precompile(Tuple{typeof(Base.push!), Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(Base.ntuple), ShaderLibrary.var"#58#59"{Array{Array{ColorTypes.RGBA{Float16}, 2}, 1}}, Int64})
precompile(Tuple{Type{ShaderLibrary.CubeMapFaces{ColorTypes.RGBA{Float16}}}, Vararg{Array{ColorTypes.RGBA{Float16}, 2}, 6}})
precompile(Tuple{typeof(Base.Iterators.zip), NTuple{6, Symbol}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{NTuple{6, Symbol}, Array{UInt64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, UInt64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, UInt64}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.CubeMapFaces{ColorTypes.RGBA{Float16}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{NTuple{6, Symbol}, Array{UInt64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.Environment{Vulkan.Format(0x00000061), :cubemap}, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, Lava.Resource, ShaderLibrary.Camera})
precompile(Tuple{typeof(ShaderLibrary.renderables), ShaderLibrary.Environment{Vulkan.Format(0x00000061), :cubemap}, ShaderLibrary.ShaderParameters, Lava.Device, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{typeof(Lava.render), Lava.Device, Lava.Command})
precompile(Tuple{typeof(Base.sqrt), Float16})
precompile(Tuple{typeof(Base.max), Float16, Float16})
precompile(Tuple{typeof(Base.rtoldefault), Type{Float16}, Type{Float16}, Int64})
precompile(Tuple{Type{ColorTypes.RGBA{Float16}}, Vararg{Int64, 4}})
precompile(Tuple{typeof(Base.isnothing), Int64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), Base.BottomRF{typeof(Base.max)}}, Symbol})
precompile(Tuple{Type{Float16}, Float16})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ComposedFunction{typeof(Base.float), typeof(LinearAlgebra.norm)}, Base.BottomRF{typeof(Base.:(+))}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), Base.BottomRF{typeof(Base.min)}}, Symbol})
precompile(Tuple{typeof(Base.:(^)), Int64, Float64})
precompile(Tuple{typeof(ColorVectorSpace.channels), ColorTypes.RGBA{Float16}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float16, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float16, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.ismissing), Float16})
precompile(Tuple{typeof(Base.:(==)), Float16, NTuple{4, Float16}})
precompile(Tuple{typeof(LinearAlgebra.normInf), NTuple{4, Float16}})
precompile(Tuple{typeof(Base.iszero), Float16})
precompile(Tuple{typeof(Base.:(/)), Float16, Float64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ComposedFunction{typeof(Base.float), typeof(LinearAlgebra.norm)}, typeof(Base.:(+))}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.min)}, Symbol})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{ColorTypes.RGBA{Float16}, 2}, Array{ColorTypes.RGBA{Float16}, 2}}}, Int64})
precompile(Tuple{typeof(Base.isapprox), Array{ColorTypes.RGBA{Float16}, 2}, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{Base.var"##any#978", Function, typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.findmin), Function, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}})
precompile(Tuple{Base.var"##mapfoldl#341", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.Pairs{Int64, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#361#362"{Main.var"#9#10"{GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}}}, typeof(Base._rf_findmin), Base._InitialValue, Base.Pairs{Int64, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}}}})
precompile(Tuple{typeof(LinearAlgebra.norm), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(Base._rf_findmin), Tuple{Float32, Int64}, Tuple{Float32, Int64}})
precompile(Tuple{typeof(Base.last), Tuple{Float32, Int64}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(GeometryExperiments.apply_transform), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}})
precompile(Tuple{Type{ShaderLibrary.BSDF{Float32}}, Tuple{Float64, Float64, Float64}, Int64, Float64, Float64})
precompile(Tuple{typeof(LinearAlgebra.dot), Float32, Float32})
precompile(Tuple{typeof(ShaderLibrary.scatter_light_sources), ShaderLibrary.BSDF{Float32}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Array{ShaderLibrary.Light{Float32}, 1}, ShaderLibrary.Camera})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>=)), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(>=)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Int64}}})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}}})
precompile(Tuple{Type{ShaderLibrary.PBR{T, P, LT, LP} where LP<:(Union{var"#s21", var"#s20"} where var"#s20"<:(ShaderLibrary.PhysicalBuffer{var"#s10"} where var"#s10"<:ShaderLibrary.LightProbe{P, Lava.DescriptorIndex}) where var"#s21"<:(Array{var"#s19", 1} where var"#s19"<:ShaderLibrary.LightProbe{P, Lava.Texture})) where LT<:(Union{var"#s21", var"#s20"} where var"#s20"<:(ShaderLibrary.PhysicalBuffer{var"#s10"} where var"#s10"<:ShaderLibrary.Light{T}) where var"#s21"<:(Array{var"#s19", 1} where var"#s19"<:ShaderLibrary.Light{T})) where P where T<:Real}, ShaderLibrary.BSDF{Float32}, Array{ShaderLibrary.Light{Float32}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float64})
precompile(Tuple{typeof(ShaderLibrary.compute_lighting_from_sources), ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, Array{ShaderLibrary.Light{Float32}, 1}, Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}, 1}}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, ShaderLibrary.Camera})
precompile(Tuple{Type{ShaderLibrary.BSDF{Float32}}, Tuple{Float64, Float64, Float64}, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vect), ShaderLibrary.Light{Float32}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, Array{ShaderLibrary.Light{Float32}, 1}, Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}, 1}}}, Lava.Device})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.flatten), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.:(*)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.:(*)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple, UInt32})
precompile(Tuple{Type{Float32}, Float32})
precompile(Tuple{typeof(Base.:(==)), Float32, Int32})
precompile(Tuple{typeof(Base.:(>)), Float32, Int64})
precompile(Tuple{typeof(Base.:(*)), Float32, Float32, Bool})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000006), SPIRV.Dim(0x00000001), 0, false, false, 1, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}, SPIRV.ImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000006), SPIRV.Dim(0x00000001), 0, false, false, 1, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{2048}, SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000006), SPIRV.Dim(0x00000001), 0, false, false, 1, StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}}}, 1, 2048}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.FloatType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.BSDF{Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalBuffer{ShaderLibrary.Light{Float32}}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.Light{Float32}}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.Light{Float32}}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.LightType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.VectorType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.Light{Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{ShaderLibrary.Light{Float32}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{ShaderLibrary.Light{Float32}, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.Light{Float32}}}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.StructType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{4, Symbol}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, ShaderLibrary.LightType})
precompile(Tuple{typeof(Base.hash), ShaderLibrary.LightType, UInt64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(SPIRV.follow_globalref), Tuple{Core.SSAValue, Core.SSAValue}})
precompile(Tuple{Base.Broadcast.var"#17#18"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(SPIRV.follow_globalref), Tuple{Tuple{Core.SSAValue, Core.SSAValue}}}}, Int64})
precompile(Tuple{typeof(SPIRV.retrieve_type), SPIRV.SPIRVTarget, SPIRV.Translation, Core.SSAValue})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}, 1}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.ImageOperands, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), NTuple{6, SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.emit_recursive_equal!), Base.RefValue{SPIRV.Block}, SPIRV.IR, SPIRV.FunctionDefinition, SPIRV.Block, SPIRV.ResultID, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.push!), SPIRV.Block, SPIRV.Expression})
precompile(Tuple{typeof(Base.lastindex), SPIRV.Block})
precompile(Tuple{typeof(Base.getindex), SPIRV.Block, Int64})
precompile(Tuple{typeof(Accessors.set), SPIRV.Expression, Accessors.PropertyLens{:result}, SPIRV.ResultID})
precompile(Tuple{Type{Tuple}, NamedTuple{(:op, :type, :result, :args), Tuple{SPIRV.OpCode, SPIRV.BooleanType, SPIRV.ResultID, Array{Any, 1}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{26, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{12, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, Vararg{SPIRV.ResultID, 6}}})
precompile(Tuple{typeof(Base.vect), ShaderLibrary.LightType})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Array{ShaderLibrary.LightType, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Base.ReinterpretArray{UInt32, 1, ShaderLibrary.LightType, Array{ShaderLibrary.LightType, 1}, false}})
precompile(Tuple{Type{GeometryExperiments.RotationPlane{Dim, T} where T where Dim}, Float64, Vararg{Float64}})
precompile(Tuple{Type{GeometryExperiments.RotationPlane{Dim, T} where T where Dim}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{Type{GeometryExperiments.Rotation{Dim, T} where T where Dim}, GeometryExperiments.RotationPlane{3, Float64}, Float64})
precompile(Tuple{Type{NamedTuple{(:rotation,), T} where T<:Tuple}, Tuple{GeometryExperiments.Quaternion{Float64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rotation,), Tuple{GeometryExperiments.Quaternion{Float64}}}, Type{GeometryExperiments.Transform{Dim, T, R} where R<:GeometryExperiments.Rotation{Dim, T} where T where Dim}})
precompile(Tuple{Type{NamedTuple{(:transform,), T} where T<:Tuple}, Tuple{GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:transform,), Tuple{GeometryExperiments.Transform{3, Float64, GeometryExperiments.Quaternion{Float64}}}}, Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}, GeometryExperiments.FaceOrientation})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:camera,), Tuple{ShaderLibrary.Camera}}, typeof(ConstructionBase.setproperties), ShaderLibrary.ShaderParameters})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Nothing, Nothing}, Int64, Int64})
precompile(Tuple{Type{ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}}, Int64, Lava.DeviceAddress})
precompile(Tuple{typeof(Core.memoryref), Memory{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}})
precompile(Tuple{Type{Lava.ResourceUsageType}, Lava.ResourceUsageType})
precompile(Tuple{Type{Lava.MemoryAccess}, Lava.MemoryAccess})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, Array{ShaderLibrary.Light{Float32}, 1}, Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}, 1}}, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.Light{Float32}, Int64})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.Light{Float32}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.BSDF{Float32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.PhysicalBuffer{ShaderLibrary.Light{Float32}}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.PhysicalBuffer{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}}, Int64})
precompile(Tuple{Type{NamedTuple{(:transform,), T} where T<:Tuple}, Tuple{GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:transform,), Tuple{GeometryExperiments.Transform{3, Float32, GeometryExperiments.Quaternion{Float32}}}}, Type{ShaderLibrary.Primitive{PT, VL, VN, VD} where VD where VN where VL where PT}, GeometryExperiments.VertexMesh{UInt16, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}, GeometryExperiments.FaceOrientation})
precompile(Tuple{typeof(Base.push!), Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}, StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}})
precompile(Tuple{typeof(ShaderLibrary.compute_irradiance), Lava.Resource, Lava.Device})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.IrradianceConvolution{Vulkan.Format(0x00000061)}, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.IrradianceConvolution{Vulkan.Format(0x00000061)}}, Lava.Device})
precompile(Tuple{typeof(Base.getindex), Int64, UInt32})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, UInt32})
precompile(Tuple{SPIRV.var"##s539#251", Vararg{Any, 4}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#252#262", Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#252#262"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#252#262"}, UInt32})
precompile(Tuple{SPIRV.var"#188#189", Float32})
precompile(Tuple{typeof(Base.:(+)), Float32, Float32, Float32})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.flatten), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.:(/)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Tuple{StaticArrays.SOneTo{3}}, typeof(Base.:(/)), Tuple{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, Float32}}, Symbol})
precompile(Tuple{typeof(Base.rem), Int64, Type{UInt128}})
precompile(Tuple{typeof(Base.:(<<)), UInt128, UInt128})
precompile(Tuple{typeof(Base.:(>>)), UInt128, UInt128})
precompile(Tuple{typeof(Base.:(+)), UInt128, UInt128})
precompile(Tuple{typeof(Base.fld), Float32, Float32})
precompile(Tuple{typeof(Base.:(*)), Float32, Type{SPIRV.LiteralType{UInt32}}})
precompile(Tuple{typeof(Base.:(*)), UInt32, UInt32})
precompile(Tuple{Base.Colon, UInt32, UInt32})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}})
precompile(Tuple{Type{Float64}, Float32})
precompile(Tuple{typeof(Base.Math.sin_kernel), Float64})
precompile(Tuple{typeof(Base.Math.cos_kernel), Float64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{S}, T, 1, S} where T where S}, Float32, Vararg{Any}})
precompile(Tuple{Type{StaticArrays.Args{T} where T<:Tuple}, Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}, UInt32})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), UInt32, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(SPIRV.ConvertUToF), Type{Float32}, UInt32})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{13, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:mip_levels,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unwrap_unionall), Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mip_levels,), Tuple{Int64}}, typeof(ShaderLibrary.compute_prefiltered_environment), Lava.Resource, Lava.Device})
precompile(Tuple{typeof(ShaderLibrary.compute_prefiltered_environment!), Lava.Image, Int64, Lava.Device, ShaderLibrary.PrefilteredEnvironmentConvolution{Vulkan.Format(0x00000061)}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.PrefilteredEnvironmentConvolution{Vulkan.Format(0x00000061)}}, Lava.Device})
precompile(Tuple{typeof(ShaderLibrary.hammersley), UInt32, UInt32})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{Lava.DescriptorIndex}}, Base.Iterators.Rest{Tuple{DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#19#20"{SPIRV.TypeMap}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.ScalarType, 1}, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#19#20"{SPIRV.TypeMap}}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Lava.DescriptorIndex, Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Lava.DescriptorIndex, Float32}}}, SPIRV.PointerType})
precompile(Tuple{Type{NamedTuple{(:base_resolution,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:base_resolution,), Tuple{Int64}}, typeof(ShaderLibrary.compute_prefiltered_environment), Lava.Resource, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:layer_range, :mip_range), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{Lava.ImageView}, Lava.Image})
precompile(Tuple{typeof(Base.size), Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:dims, :usage_flags), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Vulkan.ImageUsageFlag}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims, :usage_flags), Tuple{Array{Int64, 1}, Vulkan.ImageUsageFlag}}, typeof(Base.similar), Lava.Resource})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name,), Tuple{Nothing}}, Type{Lava.Resource}, Lava.Attachment})
precompile(Tuple{Type{ShaderLibrary.Rectangle{VT, PT, V} where V<:Union{Nothing, AbstractArray{VT, 1}} where PT where VT}, GeometryExperiments.Box{2, Float64}, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing})
precompile(Tuple{typeof(Accessors.set), ShaderLibrary.ShaderParameters, Base.ComposedFunction{Accessors.IndexLens{Tuple{Int64}}, Accessors.PropertyLens{:color}}, Lava.Resource})
precompile(Tuple{typeof(Lava.render), Lava.Device, ShaderLibrary.BRDFIntegration, ShaderLibrary.ShaderParameters, ShaderLibrary.Primitive{Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}, Nothing, Array{StaticArraysCore.SArray{Tuple{2}, Float32, 1, 2}, 1}}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.BRDFIntegration}, Lava.Device})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :name, :flags), Tuple{Lava.ResourceID, Lava.Attachment, Nothing, Lava.ResourceFlags}}})
precompile(Tuple{Type{Lava.Resource}, Lava.ResourceID, Lava.Attachment, Nothing, Lava.ResourceFlags})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name,), Tuple{Symbol}}, Type{Lava.Resource}, Lava.Image})
precompile(Tuple{Type{ShaderLibrary.LightProbe{T, R} where R<:Union{Lava.DescriptorIndex, Lava.Texture} where T}, Lava.Resource, Lava.Resource, Lava.Resource, Lava.Device})
precompile(Tuple{Type{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, R} where R<:Union{Lava.DescriptorIndex, Lava.Texture}}, Lava.Texture, Lava.Texture, Lava.Texture, Int64})
precompile(Tuple{Type{Lava.ClearValue}, Float32})
precompile(Tuple{Main.var"#render_pbr_blob#11"{Lava.Resource, ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}, ShaderLibrary.Primitive{Nothing, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}}, ShaderLibrary.BSDF{Float32}})
precompile(Tuple{typeof(Lava.dimensions), Lava.Resource})
precompile(Tuple{typeof(ConstructionBase.setproperties), ShaderLibrary.ShaderParameters, NamedTuple{(:depth, :depth_clear), Tuple{Lava.Resource, Lava.ClearValue}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:color, :color_clear, :depth, :depth_clear, :stencil, :stencil_clear, :render_state, :invocation_state, :camera), Tuple{Array{Lava.Resource, 1}, Array{Union{Nothing, Lava.ClearValue}, 1}, Lava.Resource, Lava.ClearValue, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera}}})
precompile(Tuple{Type{ShaderLibrary.ShaderParameters}, Array{Lava.Resource, 1}, Array{Union{Nothing, Lava.ClearValue}, 1}, Lava.Resource, Lava.ClearValue, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera})
precompile(Tuple{typeof(ConstructionBase.setproperties), ShaderLibrary.ShaderParameters, NamedTuple{(:camera, :depth, :color_clear), Tuple{ShaderLibrary.Camera, Lava.Resource, Array{Nothing, 1}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:color, :color_clear, :depth, :depth_clear, :stencil, :stencil_clear, :render_state, :invocation_state, :camera), Tuple{Array{Lava.Resource, 1}, Array{Nothing, 1}, Lava.Resource, Nothing, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera}}})
precompile(Tuple{Type{ShaderLibrary.ShaderParameters}, Array{Lava.Resource, 1}, Array{Nothing, 1}, Lava.Resource, Nothing, Nothing, Nothing, Lava.RenderState, Lava.ProgramInvocationState, ShaderLibrary.Camera})
precompile(Tuple{typeof(ShaderLibrary.renderables), ShaderLibrary.PBR{Float32, ColorTypes.RGBA{Float16}, Array{ShaderLibrary.Light{Float32}, 1}, Array{ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.Texture}, 1}}, ShaderLibrary.ShaderParameters, Lava.Device, ShaderLibrary.Primitive{Nothing, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Base.ReinterpretArray{StaticArraysCore.SArray{Tuple{3}, Float32, 1, 3}, 1, UInt8, Array{UInt8, 1}, false}, Nothing}})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, ShaderLibrary.LightProbe{ColorTypes.RGBA{Float16}, Lava.DescriptorIndex}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Lava.RenderNode}, Lava.Command, Lava.Command})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags), Tuple{Ptr{Nothing}, Vulkan.PipelineDepthStencilStateCreateFlag}}, Type{Vulkan._PipelineDepthStencilStateCreateInfo}, Bool, Bool, Vulkan.CompareOp, Bool, Bool, Vulkan._StencilOpState, Vulkan._StencilOpState, Float32, Float32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :vertex_input_state, :input_assembly_state, :tessellation_state, :viewport_state, :multisample_state, :depth_stencil_state, :color_blend_state, :dynamic_state, :render_pass, :base_pipeline_handle), Tuple{Vulkan.PipelineRenderingCreateInfo, Vulkan.PipelineCreateFlag, Vulkan._PipelineVertexInputStateCreateInfo, Vulkan._PipelineInputAssemblyStateCreateInfo, Ptr{Nothing}, Vulkan._PipelineViewportStateCreateInfo, Vulkan._PipelineMultisampleStateCreateInfo, Vulkan._PipelineDepthStencilStateCreateInfo, Vulkan._PipelineColorBlendStateCreateInfo, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}}, Type{Vulkan._GraphicsPipelineCreateInfo}, Array{Vulkan._PipelineShaderStageCreateInfo, 1}, Vulkan._PipelineRasterizationStateCreateInfo, Vulkan.PipelineLayout, UInt32, Int32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:depth_attachment, :stencil_attachment), Tuple{Vulkan.RenderingAttachmentInfo, Ptr{Nothing}}}, Type{Vulkan.RenderingInfo}, Vulkan.Rect2D, Int64, Int64, Array{Vulkan.RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:next, :flags, :depth_attachment, :stencil_attachment), Tuple{Ptr{Nothing}, Vulkan.RenderingFlag, Vulkan._RenderingAttachmentInfo, Ptr{Nothing}}}, Type{Vulkan._RenderingInfo}, Vulkan._Rect2D, UInt32, UInt32, Array{Vulkan._RenderingAttachmentInfo, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Memory{UInt8}}, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, UInt64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Tuple{UInt64, UInt64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{String}})
precompile(Tuple{typeof(Base.print), Base.TTY, Test.Fail})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, Symbol, Vararg{Any}})
precompile(Tuple{Base.var"##printstyled#1144", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, Symbol, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, Symbol, Vararg{Any}})
precompile(Tuple{Base.var"##with_output_color#1143", Bool, Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, Symbol, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Symbol, String, Vararg{Any}})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Core.MethodInstance, Bool, Bool, UInt64})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Nothing, Bool, Bool, UInt64})
precompile(Tuple{typeof(Base.getproperty), Core.DebugInfo, Symbol})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int32, Core.CodeInfo, Bool, Bool, Int64})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int32, Nothing, Bool, Bool, Int64})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.show_backtrace), Base.TTY, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StackTraces.StackFrame, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.StackTraces.StackFrame, Int64}, Int64, Int64})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Base.IdDict{Type, Union{Base.Missing, Array{Tuple{LineNumberNode, Expr}, 1}}}, Any, Any})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Symbol}, Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:use_color,), Tuple{Bool}}, typeof(Base.print_type_bicolor), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Type})
precompile(Tuple{Type{Test.Broken}, Symbol, Any})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Broken})
precompile(Tuple{typeof(Core.checked_dims), Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Core._checked_mul_dims), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:format, :usage_flags), T} where T<:Tuple}, Tuple{Vulkan.Format, Vulkan.ImageUsageFlag}})
precompile(Tuple{Type{NamedTuple{(:speed, :smooth_factor, :stream_power, :uplift_factor, :inverse_momentum_power, :scale, :execution), T} where T<:Tuple}, Tuple{Int64, Int64, Float64, Float64, Float32, Tuple{Int64, Int64}, Erosion.GPU}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:speed, :smooth_factor, :stream_power, :uplift_factor, :inverse_momentum_power, :scale, :execution), Tuple{Int64, Int64, Float64, Float64, Float32, Tuple{Int64, Int64}, Erosion.GPU}}, Type{Erosion.TectonicBasedErosion{Erosion.GPU, Float32, UInt32, T, U} where U where T}, Nothing, Int64})
precompile(Tuple{Type{Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}, Nothing, Int64, Int64, Float64, Float64, Int64, Base.Val{inff}, Float64, Tuple{Int64, Int64}, Erosion.GPU})
precompile(Tuple{typeof(Base.getproperty), Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}, Symbol})
precompile(Tuple{Base.Colon, Int64, UInt32})
precompile(Tuple{typeof(Base.collect), Lava.Image, Lava.Device})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mip_level, :layer), Tuple{Int64, Int64}}, typeof(Base.collect), Type{ColorTypes.RGBA{Float16}}, Lava.Image, Lava.Device})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float16}, 2}, Array{ColorTypes.RGBA{Float16}, 2}})
precompile(Tuple{Type{ShaderLibrary.GammaCorrection}, Lava.Resource})
precompile(Tuple{typeof(ShaderLibrary.compute), Lava.Device, ShaderLibrary.GammaCorrection, ShaderLibrary.ShaderParameters, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:local_size,), T} where T<:Tuple}, Tuple{Tuple{UInt32, UInt32, UInt32}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:local_size,), Tuple{Tuple{UInt32, UInt32, UInt32}}}, Type{SPIRV.ComputeExecutionOptions}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.GammaCorrection}, Lava.Device})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalRef{ShaderLibrary.GammaCorrectionData}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 2, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}}, SPIRV.ImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{512}, SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 2, StaticArraysCore.SArray{Tuple{4}, Float32, 1, 4}}, 1, 512}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{3}, UInt32, 1, 3}}, SPIRV.VectorType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Nothing}, SPIRV.VoidType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.ScalarType, 1}, Array{SPIRV.FloatType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.IntegerType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.ScalarType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._all), Base.Fix{2, typeof(Base.isequal), Type{UInt32}}, Base.Iterators.Rest{Tuple{DataType, DataType}, Int64}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, UInt32}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.ScalarType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.ArrayType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, UInt32, UInt32}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.GammaCorrectionData}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.GammaCorrectionData}}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ImageType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, Dictionaries.Dictionary{Symbol, Array{SPIRV.ResultID, 1}}, SPIRV.FunctionDefinition, Dictionaries.Dictionary{Int64, Union{SPIRV.Constant, SPIRV.Variable}}, Array{SPIRV.Variable, 1}, SPIRV.ExecutionModel, SPIRV.ComputeExecutionOptions})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VoidType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(Base.get!), SPIRV.var"#329#331"{SPIRV.ModuleTarget, SPIRV.Translation, Tuple{UInt32, UInt32, UInt32}}, Dictionaries.Dictionary{Symbol, Array{SPIRV.ResultID, 1}}, Symbol})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration, UInt32})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID})
precompile(Tuple{Type{Tuple}, NamedTuple{(:common, :local_size), Tuple{SPIRV.CommonExecutionOptions, Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}}}})
precompile(Tuple{Type{SPIRV.ComputeExecutionOptions}, SPIRV.CommonExecutionOptions, Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ExecutionMode, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.ImageType})
precompile(Tuple{typeof(SPIRV.emit_type!), SPIRV.IR, SPIRV.VoidType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.VoidType})
precompile(Tuple{typeof(SPIRV.storage_classes), SPIRV.TypeMetadata, SPIRV.VoidType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.VoidType})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{UInt32, UInt32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{UInt32, UInt32, UInt32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{UInt32, UInt32}, Int64})
precompile(Tuple{typeof(Lava.annotate!), Lava.DataBlock, SPIRV.VulkanLayout, Tuple{UInt32, UInt32, UInt32}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stages, :render_area, :commands, :name), Tuple{Vulkan.PipelineStageFlag2, Nothing, Array{Lava.Command, 1}, Nothing}}, Type{Lava.RenderNode}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Resource, Lava.DescriptorFlags, Lava.NodeID, Nothing}}})
precompile(Tuple{Type{Lava.Descriptor}, Lava.DescriptorID, Lava.Resource, Lava.DescriptorFlags, Lava.NodeID, Nothing})
precompile(Tuple{Type{Tuple}, NamedTuple{(:id, :data, :flags, :node_id, :written_state), Tuple{Lava.DescriptorID, Lava.Resource, Lava.DescriptorFlags, Lava.NodeID, Vulkan.DescriptorImageInfo}}})
precompile(Tuple{Type{Lava.Descriptor}, Lava.DescriptorID, Lava.Resource, Lava.DescriptorFlags, Lava.NodeID, Vulkan.DescriptorImageInfo})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.GammaCorrection, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Base.similar), Lava.Resource})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:usage_flags,), Tuple{Vulkan.ImageUsageFlag}}, typeof(Base.similar), Lava.Image})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name,), Tuple{Nothing}}, Type{Lava.Resource}, Lava.Image})
precompile(Tuple{Type{ShaderLibrary.GaussianBlurDirectionalComp{ColorTypes.RGBA{Float16}}}, Lava.Resource, Lava.Resource, UInt32, Int64})
precompile(Tuple{typeof(ShaderLibrary.compute), Lava.Device, ShaderLibrary.GaussianBlurDirectionalComp{ColorTypes.RGBA{Float16}}, ShaderLibrary.ShaderParameters, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.GaussianBlurDirectionalComp{ColorTypes.RGBA{Float16}}}, Lava.Device})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.PhysicalRef{ShaderLibrary.GaussianBlurDirectionalCompData}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.ScalarType, 1}, Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.FloatType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.GaussianBlurDirectionalCompData}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.GaussianBlurDirectionalCompData}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.GaussianBlurDirectionalComp{ColorTypes.RGBA{Float16}}, Symbol})
precompile(Tuple{Type{ShaderLibrary.GaussianBlurComp{ColorTypes.RGBA{Float16}}}, Lava.Resource, Lava.Resource, Int64})
precompile(Tuple{typeof(ShaderLibrary.compute), Lava.Device, ShaderLibrary.GaussianBlurComp{ColorTypes.RGBA{Float16}}, ShaderLibrary.ShaderParameters, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Lava.Image})
precompile(Tuple{typeof(Base.getproperty), ShaderLibrary.GaussianBlurComp{ColorTypes.RGBA{Float16}}, Symbol})
precompile(Tuple{Type{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, UndefInitializer, UInt32, UInt32})
precompile(Tuple{typeof(ImageIO.enforce_canonical_type), FileIO.File{FileIO.DataFormat{:PNG}, String}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float32, 2}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.permutedims), Array{Float32, 2}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"##s124#708", Vararg{Any, 8}})
precompile(Tuple{typeof(Base.:(==)), Expr, Int64})
precompile(Tuple{typeof(Base.:(-)), Base.IteratorsMD.CartesianIndex{2}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.getproperty), Interpolations.BSpline{Interpolations.Linear{Interpolations.Throw{Interpolations.OnGrid}}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Nothing}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Interpolations.Linear{Interpolations.Throw{Interpolations.OnGrid}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Interpolations.Throw{Interpolations.OnGrid}, Symbol})
precompile(Tuple{typeof(ImageTransformations.imresize), Array{Float32, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.extrema), Array{Float32, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(SPIRV.MathFunctions.remap), Array{Float32, 2}, Float32, Float32, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.map), typeof(Base.Broadcast.broadcastable), Tuple{Float32, Float32, Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Float32, 2}, Float32, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Float32, Float32, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{2}, typeof(SPIRV.MathFunctions.remap), Array{Float32, 2}, Float32, Float32, Vararg{Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{2}, typeof(SPIRV.MathFunctions.remap), Tuple{Array{Float32, 2}, Vararg{Float32, 4}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(SPIRV.MathFunctions.remap), Tuple{Array{Float32, 2}, Vararg{Float32, 4}}}})
precompile(Tuple{typeof(Vulkan.convert_nonnull), Type, Vulkan.Extent3D})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:format, :usage_flags), Tuple{Vulkan.Format, Vulkan.ImageUsageFlag}}, typeof(Lava.image_resource), Lava.Device, Array{Float32, 2}})
precompile(Tuple{typeof(Base.copyto!), Lava.Memory, Array{Float32, 2}, SPIRV.NativeLayout})
precompile(Tuple{Type{Erosion.ErosionMaps{M} where M}, Vararg{Lava.Resource, 6}})
precompile(Tuple{Type{ShaderLibrary.LargeScaleErosion{Float32, Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}}, Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}, Erosion.ErosionMaps{Lava.Resource}})
precompile(Tuple{typeof(ShaderLibrary.renderables), ShaderLibrary.LargeScaleErosion{Float32, Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}, ShaderLibrary.ShaderParameters, Lava.Device, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:local_size,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:local_size,), Tuple{Tuple{Int64, Int64, Int64}}}, Type{SPIRV.ComputeExecutionOptions}})
precompile(Tuple{Type{Lava.Program}, Type{ShaderLibrary.LargeScaleErosion{Float32, Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}}, Lava.Device})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{2}, UInt32, 1, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{SPIRV.var"##s822#203", Vararg{Any, 4}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#204#214", Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#204#214"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#204#214"}, UInt32})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{97, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{97, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{97, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{97, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000003), SPIRV.Dim(0x00000001), 0, false, false, 2, Float32}}, SPIRV.ImageType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{512}, SPIRV.Image{SPIRV.ImageFormat(0x00000003), SPIRV.Dim(0x00000001), 0, false, false, 2, Float32}, 1, 512}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.VoidType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.VoidType, 1}, SPIRV.VoidType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.VoidType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VoidType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.IntegerType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Base.Val{inff}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Erosion.GPU}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Erosion.ErosionMaps{Lava.DescriptorIndex}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.ArrayType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{ShaderLibrary.LargeScaleErosionData{Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{ShaderLibrary.LargeScaleErosionData{Erosion.TectonicBasedErosion{Erosion.GPU, Nothing, inff, Float32, UInt32}}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{GridHelpers.GridPoint{UInt32}}, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.BooleanType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.findfirst), Function, NTuple{10, Symbol}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, StaticArraysCore.SArray{Tuple{2}, UInt32, 1, 2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#313#317"{Bool, StaticArraysCore.SArray{Tuple{2}, UInt32, 1, 2}, SPIRV.ModuleTarget, SPIRV.Translation}}, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{StaticArraysCore.SArray{Tuple{8}, GridHelpers.GridPoint{UInt32}, 1, 8}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.collect), NTuple{8, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, Vararg{SPIRV.ResultID, 5}}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.emit_recursive_equal!), Base.RefValue{SPIRV.Block}, SPIRV.IR, SPIRV.FunctionDefinition, SPIRV.Block, SPIRV.ResultID, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{typeof(Base.push!), SPIRV.Block, SPIRV.Expression, SPIRV.Expression})
precompile(Tuple{typeof(SPIRV.emit_recursive_equal!), Base.RefValue{SPIRV.Block}, SPIRV.IR, SPIRV.FunctionDefinition, SPIRV.Block, SPIRV.ResultID, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Expression, Symbol})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{74, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{74, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{74, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{74, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{27, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Base.TTY, Tuple{Symbol}, NamedTuple{(:context,), Tuple{Base.TTY}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.TTY}}, typeof(Base.sprint), Function, Base.ExceptionStack})
precompile(Tuple{typeof(Base.show_exception_stack), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Base.ExceptionStack})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{AssertionError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{AssertionError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, AssertionError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Memory{UInt8}}, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_within_stacktrace), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, String, Vararg{Any}})
precompile(Tuple{Base.var"##printstyled#1144", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, String, Type, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Pair{Symbol, Bool}}}, typeof(Base.sprint), Function, AssertionError})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Memory{UInt8}}}, Any})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Union{Test.Error, Test.Fail}})
precompile(Tuple{typeof(Base.print), Base.TTY, Test.Error})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.join), Base.TTY, Base.Generator{Array{Base.SubString{String}, 1}, Test.var"#16#18"}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#46#47"{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Test.var"#46#47"{Int64}}})
precompile(Tuple{Test.var"#46#47"{Int64}, Test.DefaultTestSet})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden, :color), Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#1144", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"##printstyled#1144", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.setindex!), Memory{Union{Test.Error, Test.Fail}}, Test.Fail, Int64})
precompile(Tuple{typeof(Base.setindex!), Memory{Union{Test.Error, Test.Fail}}, Test.Error, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.scrub_repl_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.display_error), Base.ExceptionStack})
precompile(Tuple{typeof(Base.display_error), Base.TTY, Base.ExceptionStack})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, LoadError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(Base.showerror), IO, Test.TestSetException, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base._atexit), Int32})
precompile(Tuple{Base.var"#1205#1208"{Task, Base.AsyncCondition}})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge_all)})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.Pipeline, Vulkan.var"#1442#1443"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{typeof(Vulkan.decrement_refcount!), Vulkan.Pipeline})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:allocator,), Tuple{Ptr{Nothing}}}, typeof(Vulkan._destroy_pipeline), Vulkan.Device, Vulkan.Pipeline})
precompile(Tuple{Vulkan.var"##_destroy_pipeline#1447", Ptr{Nothing}, typeof(Vulkan._destroy_pipeline), Vulkan.Device, Vulkan.Pipeline})
precompile(Tuple{Vulkan.var"#4#6"{Vulkan.Fence}, Vulkan.Fence})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.Fence, Vulkan.var"#1401#1402"{Ptr{Nothing}, Vulkan.Device}, Vulkan.Device}})
precompile(Tuple{Vulkan.var"#3#5"{Vulkan.PhysicalDevice, typeof(Base.identity), Vulkan.Instance}})
precompile(Tuple{typeof(Base.uvfinalize), Base.TTY})
